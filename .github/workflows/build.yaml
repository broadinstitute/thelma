name: Bump, Tag, and Publish

# The purpose of the workflow is to:
#  1. Bump the version number and tag the release if not a PR
#  2. Build docker image and publish to GCR
#
# When run on merge to main, it tags and bumps the patch version by default. You can
# bump other parts of the version by putting #major, #minor, or #patch in your commit
# message.
#
# When run on a PR, it simulates bumping the tag and appends a hash to the pushed image.
#
# The workflow relies on github secrets:
# - GCP_PUBLISH_EMAIL - SA email for publishing to dsp-artifact-registry
# - GCP_PUBLISH_KEY_B64 - SA key (Base64-encoded JSON string) for publishing to dsp-artifact-registry
# - BROADBOT_TOKEN - the broadbot token, so we can avoid two reviewer rule on GHA operations
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
env:
  GOOGLE_PROJECT: dsp-artifact-registry
  # Name of the app-specific Docker repository configured in GOOGLE_PROJECT
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  # Name of the image to make in REPOSITORY_NAME
  IMAGE_NAME: ${{ github.event.repository.name }}
  # Region-specific Google Docker repository where GOOGLE_PROJECT/REPOSITORY_NAME can be found
  GOOGLE_DOCKER_REPOSITORY: us-central1-docker.pkg.dev
  # GCS bucket where thelma releases are hosted
  THELMA_RELEASE_BUCKET: thelma-releases
  # Version of gcloud to use for workflow steps that require it
  SETUP_GCLOUD_VERSION: '0.3.0'
  # macOS release signing cert
  THELMA_MACOS_CERT: ${{ secrets.THELMA_MACOS_CERT}}
  # macOS release signing cert password
  THELMA_MACOS_CERT_PWD: ${{ secrets.THELMA_MACOS_CERT_PWD }}
  # Apple Developer application password
  THELMA_MACOS_APP_PWD: ${{ secrets.THELMA_MACOS_APP_PWD }}
jobs:
  bump:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Bump tag to new version
        uses: databiosphere/github-actions/actions/bumper@bumper-0.0.6
        id: tag
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
          RELEASE_BRANCHES: main
          WITH_V: true

  build-linux-amd64:
    runs-on: ubuntu-latest
    needs: bump
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Cache Linux amd64 build directories
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: build-dir-cache-linux-amd64
        with:
          path: ./output
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-linux-amd64

      #
      # Build binary artifacts for amd64 Linux
      #
      - name: Build linux binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: linux
          arch: amd64
          version: ${{ needs.bump.outputs.version }}

  build-darwin-amd64:
    runs-on: ubuntu-latest
    needs: bump
    outputs:
      rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Set release output directory
        id: rel-dir-name
        run: |
          REL_DIR_PATH=./output/releases/darwin-amd64
          echo ::set-output "name=rel-dir::${REL_DIR_PATH}"

      - name: Cache release directory
        id: cache-release-darwin-amd64
        uses: actions/cache@v3
        env:
          cache-name: release-dir-cache-darwin-amd64
        with:
          path: ${{ steps.rel-dir-name.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-amd64

      #
      # Build binary artifacts for amd64 Darwin
      #
      - name: Build amd64 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: amd64
          version: ${{ needs.bump.outputs.version }}
          rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}

  build-darwin-arm64:
    runs-on: ubuntu-latest
    needs: bump
    outputs:
      rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Set release output directory
        id: rel-dir-name
        run: |
          REL_DIR_PATH=./output/releases/darwin-arm64
          echo ::set-output "name=rel-dir::${REL_DIR_PATH}"

      - name: Cache release directory
        id: cache-release-darwin-arm64
        uses: actions/cache@v3
        env:
          cache-name: release-dir-cache-darwin-arm64
        with:
          path: ${{ steps.rel-dir-name.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-arm64

      #
      # Build binary artifacts for arm64 Darwin
      #
      - name: Build arm64 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: arm64
          version: ${{ needs.bump.outputs.version }}
          rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}

  sign-and-notarize:
    runs-on: macos-latest
    needs: [build-linux-amd64, build-darwin-amd64, build-darwin-arm64]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Pull Linux amd64 build directories
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: build-dir-cache-linux-amd64
        with:
          path: ./output
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-linux-amd64

      - name: Pull Darwin amd64 release directory
        id: cache-release-darwin-amd64
        uses: actions/cache@v3
        env:
          cache-name: release-dir-cache-darwin-amd64
        with:
          path: ${{ needs.build-darwin-amd64.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-amd64

      - name: Pull Darwin arm64 release directory
        id: cache-release-darwin-arm64
        uses: actions/cache@v3
        env:
          cache-name: release-dir-cache-darwin-arm64
        with:
          path: ${{ needs.build-darwin-arm64.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-arm64

      # A second cache is needed to force GH to upload the new macOS tarballs,
      # since the existing cache already exists and therefore changes made during this step
      # are not saved for some reason. This new cache will be used during the final job
      # where the docker image is made and the release artifacts are uploaded.
      - name: Create release cache
        id: release-cache
        uses: actions/cache@v3
        env:
          cache-name: release-cache
        with:
          path: ./output/releases
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-release

      - name: Create temp keychain
        id: create-kc
        run: |
          mkdir -p ./output/kc
          echo ${THELMA_MACOS_CERT} | base64 --decode > ./output/kc/certificate.p12
          security create-keychain -p temp-kc-pwd ./output/kc/release.keychain
          security default-keychain -s ./output/kc/release.keychain
          security unlock-keychain -p temp-kc-pwd ./output/kc/release.keychain
          security import ./output/kc/certificate.p12 -k ./output/kc/release.keychain -P ${THELMA_MACOS_CERT_PWD} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp-kc-pwd ./output/kc/release.keychain

      - name: Sign and notarize macOS releases and create tarball
        id: san-tarball
        run: |
          ./scripts/sign-and-notarize.sh ./output ./output/${{ needs.build-darwin-amd64.outputs.rel-dir}}/thelma_${{ needs.bump.outputs.version }}_darwin_amd64.tar.gz ./output/releases/thelma_${{ needs.bump.outputs.version }}_darwin_amd64.tar.gz
          ./scripts/sign-and-notarize.sh ./output ./output/${{ needs.build-darwin-arm64.outputs.rel-dir}}/thelma_${{ needs.bump.outputs.version }}_darwin_arm64.tar.gz ./output/releases/thelma_${{ needs.bump.outputs.version }}_darwin_arm64.tar.gz

  dockerize-and-push:
    runs-on: ubuntu-latest
    needs: [bump, build-linux-amd64, build-darwin-amd64, build-darwin-arm64, sign-and-notarize]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Pull release cache
        id: release-cache
        uses: actions/cache@v3
        env:
          cache-name: release-cache
        with:
          path: ./output/releases
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-release

      - name: Generate checksum file
        uses: ./.github/actions/make
        with:
          target: "checksum"
          version: ${{ needs.bump.outputs.version }}

      #
      # Build Docker image
      #
      # TODO: the Dockerfile currently rebuilds thelma from scratch, would save time if we could copy the build
      # artifacts from earlier steps into the Docker image
      - name: Construct docker image name and tag
        id: image-name
        run: |
          NAME="${GOOGLE_DOCKER_REPOSITORY}/${GOOGLE_PROJECT}/${REPOSITORY_NAME}/${IMAGE_NAME}"
          DOCKER_TAG="${{ needs.bump.outputs.version }}"
          TAGGED="${NAME}:${DOCKER_TAG}"
          echo "NAME: ${NAME}"
          echo "TAGGED: ${TAGGED}"
          echo ::set-output "name=name::${NAME}"
          echo ::set-output "name=tagged::${TAGGED}"
      - name: Build image
        run: |
          docker build \
            --build-arg THELMA_LINUX_RELEASE=thelma_${{ needs.bump.outputs.version }}_linux_amd64.tar.gz \
            -t ${{ steps.image-name.outputs.tagged }} .
      - name: Run Trivy vulnerability scanner
        # From https://github.com/broadinstitute/dsp-appsec-trivy-action
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: ${{ steps.image-name.outputs.tagged }}

      #
      # Upload binaries to release bucket
      #
      - name: Auth to GCP
        uses: ./.github/actions/setup-gcloud
        with:
          service-account-key: ${{ secrets.THELMA_RELEASES_KEY_B64 }}
      - name: Upload release files to bucket
        run: |
          gsutil cp -r output/releases/* gs://${{ env.THELMA_RELEASE_BUCKET }}/releases/${{ needs.bump.outputs.version }}/
      - name: Update tags.json
        # TODO: we can make this more sophisticated at some point, but the goal right now
        # is to minimally simulate Docker's "latest" tag for thelma releases, to support auto-update.
        if: github.event_name != 'pull_request'
        run: |
          cat <<EOF > tags.json
          {"latest":"${{ needs.bump.outputs.version }}"}
          EOF
          gsutil cp tags.json gs://${{ env.THELMA_RELEASE_BUCKET }}/tags.json

      #
      # Push Docker image
      #
      - name: Auth to GCP
        uses: ./.github/actions/setup-gcloud
        with:
          version: '345.0.0'
          service-account-key: ${{ secrets.GCP_PUBLISH_KEY_B64 }}
      - name: Explicitly auth Docker for Artifact Registry
        run: gcloud auth configure-docker $GOOGLE_DOCKER_REPOSITORY --quiet
      - name: Push image
        run: "docker push ${{ steps.image-name.outputs.tagged }}"
      - name: Comment pushed image
        uses: actions/github-script@0.3.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            github.issues.createComment({ issue_number, owner, repo, body: 'Pushed image: ${{ steps.image-name.outputs.tagged }}' });
      - name: Add latest tag to Docker image
        if: github.event_name != 'pull_request'
        run: |
          gcloud artifacts docker tags add \
            "${{ steps.image-name.outputs.tagged }}" \
            "${{ steps.image-name.outputs.name }}:latest"

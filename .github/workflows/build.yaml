name: Bump, Tag, and Publish

# The purpose of the workflow is to:
#  1. Bump the version number and tag the release if not a PR
#  2. Build docker image and publish to GCR
#
# When run on merge to main, it tags and bumps the patch version by default. You can
# bump other parts of the version by putting #major, #minor, or #patch in your commit
# message.
#
# When run on a PR, it simulates bumping the tag and appends a hash to the pushed image.
#
# The workflow relies on github secrets:
# - GCP_PUBLISH_EMAIL - SA email for publishing to dsp-artifact-registry
# - GCP_PUBLISH_KEY_B64 - SA key (Base64-encoded JSON string) for publishing to dsp-artifact-registry
# - BROADBOT_TOKEN - the broadbot token, so we can avoid two reviewer rule on GHA operations
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
env:
  GOOGLE_PROJECT: dsp-artifact-registry
  # Name of the app-specific Docker repository configured in GOOGLE_PROJECT
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  # Name of the image to make in REPOSITORY_NAME
  IMAGE_NAME: ${{ github.event.repository.name }}
  # Region-specific Google Docker repository where GOOGLE_PROJECT/REPOSITORY_NAME can be found
  GOOGLE_DOCKER_REPOSITORY: us-central1-docker.pkg.dev
  # GCS bucket where thelma releases are hosted
  THELMA_RELEASE_BUCKET: thelma-releases
  # Version of gcloud to use for workflow steps that require it
  GCLOUD_VERSION: '345.0.0'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Bump tag to new version
        uses: databiosphere/github-actions/actions/bumper@bumper-0.0.3
        id: tag
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
          RELEASE_BRANCHES: main
          WITH_V: true

      - name: Build linux binary distribution
        uses: ./.github/actions/make
        with:
          target: "dist"
          os: linux
          arch: amd64
          version: ${{ steps.tag.outputs.tag }}

      - name: Build darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "dist"
          os: darwin
          arch: amd64
          version: ${{ steps.tag.outputs.tag }}

      - name: Generate checksum file
        uses: ./.github/actions/make
        with:
          target: "checksum"
          version: ${{ steps.tag.outputs.tag }}

      - name: Auth to GCP
        uses: google-github-actions/setup-gcloud@master
        with:
          version: ${{ env.GCLOUD_VERSION }}
          service_account_key: ${{ secrets.THELMA_RELEASES_KEY_B64 }}

      - name: Upload all files in release directory
        run: |
          gsutil cp output/releases/* gs://${{ env.THELMA_RELEASE_BUCKET }}/releases/${{ steps.tag.outputs.tag }}/
#  build:
#    runs-on: ubuntu-latest
#    needs: tag
#    strategy:
#      matrix:
#        arch:
#          - "amd64"
#        os:
#          - "linux"
#          - "darwin"
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#      - name: Build binary distribution
#        uses: ./.github/actions/make
#        with:
#          target: "dist"
#          os: ${{ matrix.os }}
#          arch: ${{ matrix.arch }}
#          version: ${{ needs.tag.outputs.version }}
#
#      - name: Auth to GCP
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          version: '345.0.0'
#          service_account_key: ${{ secrets.THELMA_RELEASES_KEY_B64 }}
#
#      - name: Publish binary distribution
#        run: |
#          gcloud cp output/releases/*

#
#      - name: Set image name
#        id: image-name
#        run: |
#          set -eo pipefail
#
#          NAME="${{ needs.tools.outputs.image-base-url }}/${{ matrix.image-name }}"
#          echo "::set-output name=name::${NAME}"
#
#          # Fully qualified image name + sha.
#          echo "::set-output name=tagged::${NAME}:${{ needs.tools.outputs.tag-long }}"
#
#      - name: Auth to GCP
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          version: '345.0.0'
#          service_account_email: ${{ secrets.GCP_PUBLISH_EMAIL }}
#          service_account_key: ${{ secrets.GCP_PUBLISH_KEY_B64 }}
#
#      - name: Explicitly auth Docker for Artifact Registry
#        run: gcloud auth configure-docker $GOOGLE_DOCKER_REPOSITORY --quiet
#
#      - name: Build image
#        run: |
#          docker build \
#            --build-arg tools_image="${{ needs.tools.outputs.image }}" \
#            --build-arg argocd_version="${ARGOCD_VERSION}" \
#            --build-arg vault_version="${VAULT_VERSION}" \
#            -t "${{ steps.image-name.outputs.tagged }}" \
#            "./images/${{ matrix.image-name }}"
#
#  tag-publish-job:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout current code
#        uses: actions/checkout@v2
#        with:
#          token: ${{ secrets.BROADBOT_TOKEN }}
#
#      - name: Bump the tag to a new version
#        uses: databiosphere/github-actions/actions/bumper@bumper-0.0.3
#        id: tag
#        env:
#          DEFAULT_BUMP: patch
#          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
#          RELEASE_BRANCHES: main
#          WITH_V: true
#
#      - name: Build Thelma distribution
#        uses: .github/actions/dist
#        id: dist
#        with:
#          version: ${{ steps.tag.outputs.tag }}
#      - name: Auth to GCP
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          version: '345.0.0'
#          service_account_email: ${{ secrets.GCP_PUBLISH_EMAIL }}
#          service_account_key: ${{ secrets.GCP_PUBLISH_KEY_B64 }}
#
#      - name: Explicitly auth Docker for Artifact Registry
#        run: gcloud auth configure-docker $GOOGLE_DOCKER_REPOSITORY --quiet
#
#      - name: Construct docker image name and tag
#        id: image-name
#        run: |
#          DOCKER_TAG=${{ steps.tag.outputs.tag }}
#          echo ::set-output name=name::${GOOGLE_DOCKER_REPOSITORY}/${GOOGLE_PROJECT}/${REPOSITORY_NAME}/${IMAGE_NAME}:${DOCKER_TAG}
#      - name: Build image
#        run: "docker build -t ${{ steps.image-name.outputs.name }} ."
#
#      - name: Run Trivy vulnerability scanner
#        # From https://github.com/broadinstitute/dsp-appsec-trivy-action
#        uses: broadinstitute/dsp-appsec-trivy-action@v1
#        with:
#          image: ${{ steps.image-name.outputs.name }}
#
#      - name: Push image
#        run: "docker push ${{ steps.image-name.outputs.name }}"
#
#      - name: Add latest tag
#        if: github.event_name != 'pull_request'
#        run: gcloud artifacts tags add "${{ steps.image-name.outputs.name }}" latest
#
#      - name: Comment pushed image
#        uses: actions/github-script@0.3.0
#        if: github.event_name == 'pull_request'
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
#            github.issues.createComment({ issue_number, owner, repo, body: 'Pushed image: ${{ steps.image-name.outputs.name }}' });

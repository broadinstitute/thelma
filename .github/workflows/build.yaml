name: Bump, Tag, and Publish

# The purpose of the workflow is to:
#  1. Bump the version number and tag the release if not a PR
#  2. Build docker image and publish to GCR
#
# This workflow uses caching and parallel builds for speedup as follows:
# 1. The `cache-go-deps` job caches ~/go just for this workflow.
# Then, in parallel:
# 2a. The `build-linux-amd64` job pulls the Go cache and creates its own cache
#    for `./output/releases`.
# 2b. The `build-darwin-amd64` job pulls the Go cache and creates its own cache
#    for `./output/releases/darwin-amd64`.
# 2c. The `build-darwin-arm64` job pulls the Go cache and creates its own cache
#    for `./output/releases/darwin-arm64`.
# Afterwards:
# 3. The `sign-and-notarize` job pulls the above release caches, signs and notarizes
#    the darwin release tarballs, and uploads them to the thelma-releases GCS bucket.
# 4. The `dockerize-and-push` job pulls the above release caches, builds the docker
#    image, and pushes it.
#
# When run on merge to main, it tags and bumps the patch version by default. You can
# bump other parts of the version by putting #major, #minor, or #patch in your commit
# message.
#
# When run on a PR, it simulates bumping the tag and appends a hash to the pushed image.
#
# The workflow relies on github secrets:
# - BROADBOT_TOKEN - the broadbot token, so we can avoid two reviewer rule on GHA operations
on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'foundation.yaml'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'foundation.yaml'
env:
  # GCS bucket where thelma releases are hosted
  THELMA_RELEASE_BUCKET: thelma-releases
  # macOS release signing cert
  THELMA_MACOS_CERT: ${{ secrets.THELMA_MACOS_CERT}}
  # macOS release signing cert password
  THELMA_MACOS_CERT_PWD: ${{ secrets.THELMA_MACOS_CERT_PWD }}
  # Apple Developer application password
  THELMA_MACOS_APP_PWD: ${{ secrets.THELMA_MACOS_APP_PWD }}
jobs:
  bump:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Bump tag to new version
        uses: databiosphere/github-actions/actions/bumper@bumper-0.3.0
        id: tag
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
          RELEASE_BRANCHES: main
          WITH_V: true

  cache-go-deps:
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      - name: Cache Go deps
        id: go-cache
        uses: actions/cache@v4
        env:
          cache-name: go-cache
        with:
          path: ~/go
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-go-cache

      - run: go mod download -x
        shell: bash

  build-linux-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [bump, cache-go-deps]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      - name: Pull Go deps cache
        id: go-cache
        uses: actions/cache@v4
        env:
          cache-name: go-cache
        with:
          path: ~/go
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-go-cache

      - name: Cache Linux amd64 build directories
        id: cache-build-linux-amd64
        uses: actions/cache@v4
        env:
          cache-name: build-dir-cache-linux-amd64
        with:
          path: ./output/releases
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-linux-amd64

      #
      # Build binary artifacts for amd64 Linux
      #
      - name: Build linux binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: linux
          arch: amd64
          version: ${{ needs.bump.outputs.version }}

  build-darwin-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [bump, cache-go-deps]
    outputs:
      rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      - name: Pull Go deps cache
        id: go-cache
        uses: actions/cache@v4
        env:
          cache-name: go-cache
        with:
          path: ~/go
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-go-cache

      - name: Set release output directory
        id: rel-dir-name
        run: |
          REL_DIR_PATH=./output/releases/darwin-amd64
          echo rel-dir=${REL_DIR_PATH} >> $GITHUB_OUTPUT

      - name: Cache release directory
        id: cache-release-darwin-amd64
        uses: actions/cache@v4
        env:
          cache-name: release-dir-cache-darwin-amd64
        with:
          path: ${{ steps.rel-dir-name.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-amd64

      #
      # Build binary artifacts for amd64 Darwin
      #
      - name: Build amd64 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: amd64
          version: ${{ needs.bump.outputs.version }}
          rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}

  build-darwin-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [bump, cache-go-deps]
    outputs:
      rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      - name: Pull Go deps cache
        id: go-cache
        uses: actions/cache@v4
        env:
          cache-name: go-cache
        with:
          path: ~/go
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-go-cache

      - name: Set release output directory
        id: rel-dir-name
        run: |
          REL_DIR_PATH=./output/releases/darwin-arm64
          echo ::set-output "name=rel-dir::${REL_DIR_PATH}"

      - name: Cache release directory
        id: cache-release-darwin-arm64
        uses: actions/cache@v4
        env:
          cache-name: release-dir-cache-darwin-arm64
        with:
          path: ${{ steps.rel-dir-name.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-arm64

      #
      # Build binary artifacts for arm64 Darwin
      #
      - name: Build arm64 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: arm64
          version: ${{ needs.bump.outputs.version }}
          rel-dir: ${{ steps.rel-dir-name.outputs.rel-dir }}

  sign-and-notarize:
    runs-on: macos-latest
    permissions:
      contents: read
      id-token: write
    needs: [bump, build-linux-amd64, build-darwin-amd64, build-darwin-arm64]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      # Pull binaries compiled in previous steps
      - name: Pull Linux amd64 build directories
        id: cache-build-linux-amd64
        uses: actions/cache@v4
        env:
          cache-name: build-dir-cache-linux-amd64
        with:
          path: ./output/releases
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-linux-amd64

      - name: Pull Darwin amd64 release directory
        id: cache-release-darwin-amd64
        uses: actions/cache@v4
        env:
          cache-name: release-dir-cache-darwin-amd64
        with:
          path: ${{ needs.build-darwin-amd64.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-amd64

      - name: Pull Darwin arm64 release directory
        id: cache-release-darwin-arm64
        uses: actions/cache@v4
        env:
          cache-name: release-dir-cache-darwin-arm64
        with:
          path: ${{ needs.build-darwin-arm64.outputs.rel-dir }}
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-darwin-arm64

      # Sign OSX binaries
      - name: Create temp keychain
        id: create-kc
        run: |
          mkdir -p ./output/kc
          echo ${THELMA_MACOS_CERT} | base64 --decode > ./output/kc/certificate.p12
          security create-keychain -p temp-kc-pwd ./output/kc/release.keychain
          security default-keychain -s ./output/kc/release.keychain
          security unlock-keychain -p temp-kc-pwd ./output/kc/release.keychain
          security import ./output/kc/certificate.p12 -k ./output/kc/release.keychain -P ${THELMA_MACOS_CERT_PWD} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp-kc-pwd ./output/kc/release.keychain

      - name: Sign and notarize macOS releases and create tarball
        id: san-tarball
        run: |
          ./scripts/sign-and-notarize.sh ./output ${{ needs.build-darwin-amd64.outputs.rel-dir}}/thelma_${{ needs.bump.outputs.version }}_darwin_amd64.tar.gz ./output/releases/thelma_${{ needs.bump.outputs.version }}_darwin_amd64.tar.gz >&2
          ./scripts/sign-and-notarize.sh ./output ${{ needs.build-darwin-arm64.outputs.rel-dir}}/thelma_${{ needs.bump.outputs.version }}_darwin_arm64.tar.gz ./output/releases/thelma_${{ needs.bump.outputs.version }}_darwin_arm64.tar.gz >&2
          rm -rf ${{ needs.build-darwin-amd64.outputs.rel-dir}} ${{ needs.build-darwin-arm64.outputs.rel-dir}}

      # Upload binaries to GCS bucket
      - name: Generate checksum file
        uses: ./.github/actions/make
        with:
          target: "checksum"
          version: ${{ needs.bump.outputs.version }}
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider
          service_account: thelma-releases-sa@dsp-artifact-registry.iam.gserviceaccount.com
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Upload release files to bucket
        run: |
          gsutil cp -r output/releases/* gs://${{ env.THELMA_RELEASE_BUCKET }}/releases/${{ needs.bump.outputs.version }}/

  dockerize-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    needs: [bump, build-linux-amd64]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull Linux amd64 build directories
        id: cache-build-linux-amd64
        uses: actions/cache@v4
        env:
          cache-name: build-dir-cache-linux-amd64
        with:
          path: ./output/releases
          key: commit-${{ github.sha }}-job-${{ github.run_id }}-linux-amd64

      #
      # Build Docker image
      #
      - name: Assemble Docker images names and tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          # We want to push to multiple images, so we use Docker's metadata action to help;
          # it automatically does the cartesian product of image names and tags.
          #
          # Note that we're intentionally inlining the image names here -- the pattern in
          # some other workflows of exposing image name segments as environment variables
          # breaks down when you want to push to multiple image names. We judge it's clearer
          # to just see the image names in plaintext.
          images: |
            us-central1-docker.pkg.dev/dsp-artifact-registry/thelma/thelma
            us-central1-docker.pkg.dev/dsp-devops-super-prod/thelma/thelma
          # Creates tags like v1.2.3, v1.2, v1, and latest on main branch;
          # creates just v1.2.3-a1b2c3 otherwise.
          tags: |
            type=raw,value=${{ needs.bump.outputs.version }}
            type=semver,pattern=v{{major}},value=${{ needs.bump.outputs.version }},enable={{is_default_branch}}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ needs.bump.outputs.version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          # Don't push, just build and load locally.
          push: false
          load: true
          context: .
          file: Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            THELMA_LINUX_RELEASE=thelma_${{ needs.bump.outputs.version }}_linux_amd64.tar.gz
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: us-central1-docker.pkg.dev/dsp-artifact-registry/thelma/thelma:${{ needs.bump.outputs.version }}

      - name: Auth to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider
          service_account: gha-gar-writer@dsp-devops-super-prod.iam.gserviceaccount.com

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Push image
        uses: docker/build-push-action@v5
        with:
          # "Build" (instant, via local cache from earlier) and push images;
          # we do have to repeat the earlier parameters here for the cache to work.
          push: true
          load: false
          context: .
          file: Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            THELMA_LINUX_RELEASE=thelma_${{ needs.bump.outputs.version }}_linux_amd64.tar.gz
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment pushed image
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: image
          message: |
            Published image from ${{ github.event.pull_request.head.sha }} (merge ${{ github.sha }}):
            
            ```
            us-central1-docker.pkg.dev/dsp-artifact-registry/thelma/thelma:${{ needs.bump.outputs.version }}
            us-central1-docker.pkg.dev/dsp-devops-super-prod/thelma/thelma:${{ needs.bump.outputs.version }}
            ```

  update-latest-tarball:
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    # We don't actually rely on dockerize-and-push, but we block on it so we don't update latest if it fails.
    needs: [bump, dockerize-and-push, sign-and-notarize]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4

      #
      # Update tags.json
      #
      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider
          service_account: thelma-releases-sa@dsp-artifact-registry.iam.gserviceaccount.com
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Update tags.json
        # TODO: we can make this more sophisticated at some point, but the goal right now
        # is to minimally simulate Docker's "latest" tag for thelma binary releases, to support auto-update.
        run: |
          cat <<EOF > tags.json
          {"latest":"${{ needs.bump.outputs.version }}"}
          EOF
          gsutil cp tags.json gs://${{ env.THELMA_RELEASE_BUCKET }}/tags.json


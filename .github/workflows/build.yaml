name: Bump, Tag, and Publish

# The purpose of the workflow is to:
#  1. Bump the version number and tag the release if not a PR
#  2. Build docker image and publish to GCR
#
# When run on merge to main, it tags and bumps the patch version by default. You can
# bump other parts of the version by putting #major, #minor, or #patch in your commit
# message.
#
# When run on a PR, it simulates bumping the tag and appends a hash to the pushed image.
#
# The workflow relies on github secrets:
# - GCP_PUBLISH_EMAIL - SA email for publishing to dsp-artifact-registry
# - GCP_PUBLISH_KEY_B64 - SA key (Base64-encoded JSON string) for publishing to dsp-artifact-registry
# - BROADBOT_TOKEN - the broadbot token, so we can avoid two reviewer rule on GHA operations
on:
  pull_request:
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
env:
  GOOGLE_PROJECT: dsp-artifact-registry
  # Name of the app-specific Docker repository configured in GOOGLE_PROJECT
  REPOSITORY_NAME: ${{ github.event.repository.name }}
  # Name of the image to make in REPOSITORY_NAME
  IMAGE_NAME: ${{ github.event.repository.name }}
  # Region-specific Google Docker repository where GOOGLE_PROJECT/REPOSITORY_NAME can be found
  GOOGLE_DOCKER_REPOSITORY: us-central1-docker.pkg.dev
  # GCS bucket where thelma releases are hosted
  THELMA_RELEASE_BUCKET: thelma-releases
  # Version of gcloud to use for workflow steps that require it
  SETUP_GCLOUD_VERSION: '0.3.0'
  # macOS release signing cert
  THELMA_MACOS_CERT: ${{ secrets.THELMA_MACOS_CERT}}
  # macOS release signing cert password
  THELMA_MACOS_CERT_PWD: ${{ secrets.THELMA_MACOS_CERT_PWD }}
  # Apple Developer application password
  THELMA_MACOS_APP_PWD: ${{ secrets.THELMA_MACOS_APP_PWD }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Cache build directory
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: build-dir-cache
        with:
          path: ./output
          key: commit-${{ github.sha }}-job-${{ github.run_id }}

      - name: Bump tag to new version
        uses: databiosphere/github-actions/actions/bumper@bumper-0.0.6
        id: tag
        env:
          DEFAULT_BUMP: patch
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
          RELEASE_BRANCHES: main
          WITH_V: true

      #
      # Build binary artifacts for Darwin and Linux
      #
      # TODO: would save time if we could cache go module dependencies across build steps
      - name: Build linux binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: linux
          arch: amd64
          version: ${{ needs.bump-and-build1.outputs.version }}
      - name: Build amd64 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: amd64
          version: ${{ needs.bump-and-build1.outputs.version }}

      - name: Build arm64 M1 darwin binary distribution
        uses: ./.github/actions/make
        with:
          target: "release"
          os: darwin
          arch: arm64
          version: ${{ needs.bump-and-build1.outputs.version }}
      - name: Generate checksum file
        uses: ./.github/actions/make
        with:
          target: "checksum"
          version: ${{ needs.bump-and-build1.outputs.version }}

  sign-and-notarize:
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Pull cache
        id: pull-cache
        uses: actions/cache@v3
        env:
          cache-name: build-dir-cache
        with:
          path: ./output
          key: commit-${{ github.sha }}-job-${{ github.run_id }}

      - name: Sign and notarize macOS release and create tarball
        id: san-tarball
        run: |
          ./scripts/sign-and-notarize.sh ./output ./output/releases/thelma_${{ needs.bump-and-build1.outputs.version }}_darwin_amd64.tar.gz
          ./scripts/sign-and-notarize.sh ./output ./output/releases/thelma_${{ needs.bump-and-build1.outputs.version }}_darwin_arm64.tar.gz

  dockerize-and-push:
    runs-on: ubuntu-latest
    needs: [build, sign-and-notarize-arm64]
    steps:
      - name: Checkout current code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Pull cache
        id: pull-cache
        uses: actions/cache@v3
        env:
          cache-name: build-dir-cache
        with:
          path: ./output
          key: commit-${{ github.sha }}-job-${{ github.run_id}}

      #
      # Build Docker image
      #
      # TODO: the Dockerfile currently rebuilds thelma from scratch, would save time if we could copy the build
      # artifacts from earlier steps into the Docker image
      - name: Construct docker image name and tag
        id: image-name
        run: |
          NAME="${GOOGLE_DOCKER_REPOSITORY}/${GOOGLE_PROJECT}/${REPOSITORY_NAME}/${IMAGE_NAME}"
          DOCKER_TAG="${{ needs.bump-and-build1.outputs.version }}"
          TAGGED="${NAME}:${DOCKER_TAG}"
          echo "NAME: ${NAME}"
          echo "TAGGED: ${TAGGED}"
          echo ::set-output "name=name::${NAME}"
          echo ::set-output "name=tagged::${TAGGED}"
      - name: Build image
        run: "docker build --build-arg THELMA_VERSION=${{ needs.bump-and-build1.outputs.version }} -t ${{ steps.image-name.outputs.tagged }} ."
      - name: Run Trivy vulnerability scanner
        # From https://github.com/broadinstitute/dsp-appsec-trivy-action
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: ${{ steps.image-name.outputs.tagged }}

      #
      # Upload binaries to release bucket
      #
      - name: Auth to GCP
        uses: ./.github/actions/setup-gcloud
        with:
          service-account-key: ${{ secrets.THELMA_RELEASES_KEY_B64 }}
      - name: Upload release files to bucket
        run: |
          gsutil cp -r output/releases/* gs://${{ env.THELMA_RELEASE_BUCKET }}/releases/${{ needs.bump-and-build1.outputs.version }}/
      - name: Update tags.json
        # TODO: we can make this more sophisticated at some point, but the goal right now
        # is to minimally simulate Docker's "latest" tag for thelma releases, to support auto-update.
        if: github.event_name != 'pull_request'
        run: |
          cat <<EOF > tags.json
          {"latest":"${{ needs.bump-and-build1.outputs.version }}"}
          EOF
          gsutil cp tags.json gs://${{ env.THELMA_RELEASE_BUCKET }}/tags.json

      #
      # Push Docker image
      #
      - name: Auth to GCP
        uses: ./.github/actions/setup-gcloud
        with:
          version: '345.0.0'
          service-account-key: ${{ secrets.GCP_PUBLISH_KEY_B64 }}
      - name: Explicitly auth Docker for Artifact Registry
        run: gcloud auth configure-docker $GOOGLE_DOCKER_REPOSITORY --quiet
      - name: Push image
        run: "docker push ${{ steps.image-name.outputs.tagged }}"
      - name: Comment pushed image
        uses: actions/github-script@0.3.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
            github.issues.createComment({ issue_number, owner, repo, body: 'Pushed image: ${{ steps.image-name.outputs.tagged }}' });
      - name: Add latest tag to Docker image
        if: github.event_name != 'pull_request'
        run: |
          gcloud artifacts docker tags add \
            "${{ steps.image-name.outputs.tagged }}" \
            "${{ steps.image-name.outputs.name }}:latest"

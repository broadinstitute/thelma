// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PostUpdateSyncer is an autogenerated mock type for the PostUpdateSyncer type
type PostUpdateSyncer struct {
	mock.Mock
}

type PostUpdateSyncer_Expecter struct {
	mock *mock.Mock
}

func (_m *PostUpdateSyncer) EXPECT() *PostUpdateSyncer_Expecter {
	return &PostUpdateSyncer_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: chartReleaseNames
func (_m *PostUpdateSyncer) Sync(chartReleaseNames []string) error {
	ret := _m.Called(chartReleaseNames)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(chartReleaseNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostUpdateSyncer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type PostUpdateSyncer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - chartReleaseNames []string
func (_e *PostUpdateSyncer_Expecter) Sync(chartReleaseNames interface{}) *PostUpdateSyncer_Sync_Call {
	return &PostUpdateSyncer_Sync_Call{Call: _e.mock.On("Sync", chartReleaseNames)}
}

func (_c *PostUpdateSyncer_Sync_Call) Run(run func(chartReleaseNames []string)) *PostUpdateSyncer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *PostUpdateSyncer_Sync_Call) Return(_a0 error) *PostUpdateSyncer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostUpdateSyncer_Sync_Call) RunAndReturn(run func([]string) error) *PostUpdateSyncer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPostUpdateSyncer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostUpdateSyncer creates a new instance of PostUpdateSyncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostUpdateSyncer(t mockConstructorTestingTNewPostUpdateSyncer) *PostUpdateSyncer {
	mock := &PostUpdateSyncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

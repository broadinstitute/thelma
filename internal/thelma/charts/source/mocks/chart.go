// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Chart is an autogenerated mock type for the Chart type
type Chart struct {
	mock.Mock
}

type Chart_Expecter struct {
	mock *mock.Mock
}

func (_m *Chart) EXPECT() *Chart_Expecter {
	return &Chart_Expecter{mock: &_m.Mock}
}

// BumpChartVersion provides a mock function with given fields: latestPublishedVersion
func (_m *Chart) BumpChartVersion(latestPublishedVersion string) (string, error) {
	ret := _m.Called(latestPublishedVersion)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(latestPublishedVersion)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(latestPublishedVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(latestPublishedVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chart_BumpChartVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BumpChartVersion'
type Chart_BumpChartVersion_Call struct {
	*mock.Call
}

// BumpChartVersion is a helper method to define mock.On call
//   - latestPublishedVersion string
func (_e *Chart_Expecter) BumpChartVersion(latestPublishedVersion interface{}) *Chart_BumpChartVersion_Call {
	return &Chart_BumpChartVersion_Call{Call: _e.mock.On("BumpChartVersion", latestPublishedVersion)}
}

func (_c *Chart_BumpChartVersion_Call) Run(run func(latestPublishedVersion string)) *Chart_BumpChartVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Chart_BumpChartVersion_Call) Return(_a0 string, _a1 error) *Chart_BumpChartVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Chart_BumpChartVersion_Call) RunAndReturn(run func(string) (string, error)) *Chart_BumpChartVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDocs provides a mock function with given fields:
func (_m *Chart) GenerateDocs() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chart_GenerateDocs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDocs'
type Chart_GenerateDocs_Call struct {
	*mock.Call
}

// GenerateDocs is a helper method to define mock.On call
func (_e *Chart_Expecter) GenerateDocs() *Chart_GenerateDocs_Call {
	return &Chart_GenerateDocs_Call{Call: _e.mock.On("GenerateDocs")}
}

func (_c *Chart_GenerateDocs_Call) Run(run func()) *Chart_GenerateDocs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_GenerateDocs_Call) Return(_a0 error) *Chart_GenerateDocs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_GenerateDocs_Call) RunAndReturn(run func() error) *Chart_GenerateDocs_Call {
	_c.Call.Return(run)
	return _c
}

// LocalDependencies provides a mock function with given fields:
func (_m *Chart) LocalDependencies() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Chart_LocalDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalDependencies'
type Chart_LocalDependencies_Call struct {
	*mock.Call
}

// LocalDependencies is a helper method to define mock.On call
func (_e *Chart_Expecter) LocalDependencies() *Chart_LocalDependencies_Call {
	return &Chart_LocalDependencies_Call{Call: _e.mock.On("LocalDependencies")}
}

func (_c *Chart_LocalDependencies_Call) Run(run func()) *Chart_LocalDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_LocalDependencies_Call) Return(_a0 []string) *Chart_LocalDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_LocalDependencies_Call) RunAndReturn(run func() []string) *Chart_LocalDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// ManifestVersion provides a mock function with given fields:
func (_m *Chart) ManifestVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Chart_ManifestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManifestVersion'
type Chart_ManifestVersion_Call struct {
	*mock.Call
}

// ManifestVersion is a helper method to define mock.On call
func (_e *Chart_Expecter) ManifestVersion() *Chart_ManifestVersion_Call {
	return &Chart_ManifestVersion_Call{Call: _e.mock.On("ManifestVersion")}
}

func (_c *Chart_ManifestVersion_Call) Run(run func()) *Chart_ManifestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_ManifestVersion_Call) Return(_a0 string) *Chart_ManifestVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_ManifestVersion_Call) RunAndReturn(run func() string) *Chart_ManifestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Chart) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Chart_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Chart_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Chart_Expecter) Name() *Chart_Name_Call {
	return &Chart_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Chart_Name_Call) Run(run func()) *Chart_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_Name_Call) Return(_a0 string) *Chart_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_Name_Call) RunAndReturn(run func() string) *Chart_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PackageChart provides a mock function with given fields: destPath
func (_m *Chart) PackageChart(destPath string) error {
	ret := _m.Called(destPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(destPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chart_PackageChart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PackageChart'
type Chart_PackageChart_Call struct {
	*mock.Call
}

// PackageChart is a helper method to define mock.On call
//   - destPath string
func (_e *Chart_Expecter) PackageChart(destPath interface{}) *Chart_PackageChart_Call {
	return &Chart_PackageChart_Call{Call: _e.mock.On("PackageChart", destPath)}
}

func (_c *Chart_PackageChart_Call) Run(run func(destPath string)) *Chart_PackageChart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Chart_PackageChart_Call) Return(_a0 error) *Chart_PackageChart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_PackageChart_Call) RunAndReturn(run func(string) error) *Chart_PackageChart_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *Chart) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Chart_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type Chart_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *Chart_Expecter) Path() *Chart_Path_Call {
	return &Chart_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *Chart_Path_Call) Run(run func()) *Chart_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_Path_Call) Return(_a0 string) *Chart_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_Path_Call) RunAndReturn(run func() string) *Chart_Path_Call {
	_c.Call.Return(run)
	return _c
}

// SetDependencyVersion provides a mock function with given fields: dependencyName, newVersionConstraint
func (_m *Chart) SetDependencyVersion(dependencyName string, newVersionConstraint string) error {
	ret := _m.Called(dependencyName, newVersionConstraint)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(dependencyName, newVersionConstraint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chart_SetDependencyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDependencyVersion'
type Chart_SetDependencyVersion_Call struct {
	*mock.Call
}

// SetDependencyVersion is a helper method to define mock.On call
//   - dependencyName string
//   - newVersionConstraint string
func (_e *Chart_Expecter) SetDependencyVersion(dependencyName interface{}, newVersionConstraint interface{}) *Chart_SetDependencyVersion_Call {
	return &Chart_SetDependencyVersion_Call{Call: _e.mock.On("SetDependencyVersion", dependencyName, newVersionConstraint)}
}

func (_c *Chart_SetDependencyVersion_Call) Run(run func(dependencyName string, newVersionConstraint string)) *Chart_SetDependencyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Chart_SetDependencyVersion_Call) Return(_a0 error) *Chart_SetDependencyVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_SetDependencyVersion_Call) RunAndReturn(run func(string, string) error) *Chart_SetDependencyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDependencies provides a mock function with given fields:
func (_m *Chart) UpdateDependencies() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chart_UpdateDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDependencies'
type Chart_UpdateDependencies_Call struct {
	*mock.Call
}

// UpdateDependencies is a helper method to define mock.On call
func (_e *Chart_Expecter) UpdateDependencies() *Chart_UpdateDependencies_Call {
	return &Chart_UpdateDependencies_Call{Call: _e.mock.On("UpdateDependencies")}
}

func (_c *Chart_UpdateDependencies_Call) Run(run func()) *Chart_UpdateDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Chart_UpdateDependencies_Call) Return(_a0 error) *Chart_UpdateDependencies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Chart_UpdateDependencies_Call) RunAndReturn(run func() error) *Chart_UpdateDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// NewChart creates a new instance of Chart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChart(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chart {
	mock := &Chart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// ConfigLoader is an autogenerated mock type for the ConfigLoader type
type ConfigLoader struct {
	mock.Mock
}

type ConfigLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigLoader) EXPECT() *ConfigLoader_Expecter {
	return &ConfigLoader_Expecter{mock: &_m.Mock}
}

// FindReleasesToUpdate provides a mock function with given fields: chartName
func (_m *ConfigLoader) FindReleasesToUpdate(chartName string) ([]terra.Release, error) {
	ret := _m.Called(chartName)

	var r0 []terra.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]terra.Release, error)); ok {
		return rf(chartName)
	}
	if rf, ok := ret.Get(0).(func(string) []terra.Release); ok {
		r0 = rf(chartName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]terra.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chartName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigLoader_FindReleasesToUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindReleasesToUpdate'
type ConfigLoader_FindReleasesToUpdate_Call struct {
	*mock.Call
}

// FindReleasesToUpdate is a helper method to define mock.On call
//   - chartName string
func (_e *ConfigLoader_Expecter) FindReleasesToUpdate(chartName interface{}) *ConfigLoader_FindReleasesToUpdate_Call {
	return &ConfigLoader_FindReleasesToUpdate_Call{Call: _e.mock.On("FindReleasesToUpdate", chartName)}
}

func (_c *ConfigLoader_FindReleasesToUpdate_Call) Run(run func(chartName string)) *ConfigLoader_FindReleasesToUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConfigLoader_FindReleasesToUpdate_Call) Return(_a0 []terra.Release, _a1 error) *ConfigLoader_FindReleasesToUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigLoader_FindReleasesToUpdate_Call) RunAndReturn(run func(string) ([]terra.Release, error)) *ConfigLoader_FindReleasesToUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigLoader creates a new instance of ConfigLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigLoader {
	mock := &ConfigLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

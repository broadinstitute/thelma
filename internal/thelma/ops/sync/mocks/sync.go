// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	argocd "github.com/broadinstitute/thelma/internal/thelma/toolbox/argocd"
	mock "github.com/stretchr/testify/mock"

	status "github.com/broadinstitute/thelma/internal/thelma/ops/status"

	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
)

// Sync is an autogenerated mock type for the Sync type
type Sync struct {
	mock.Mock
}

type Sync_Expecter struct {
	mock *mock.Mock
}

func (_m *Sync) EXPECT() *Sync_Expecter {
	return &Sync_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: releases, maxParallel, options
func (_m *Sync) Sync(releases []terra.Release, maxParallel int, options ...argocd.SyncOption) (map[terra.Release]*status.Status, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, releases, maxParallel)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 map[terra.Release]*status.Status
	var r1 error
	if rf, ok := ret.Get(0).(func([]terra.Release, int, ...argocd.SyncOption) (map[terra.Release]*status.Status, error)); ok {
		return rf(releases, maxParallel, options...)
	}
	if rf, ok := ret.Get(0).(func([]terra.Release, int, ...argocd.SyncOption) map[terra.Release]*status.Status); ok {
		r0 = rf(releases, maxParallel, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[terra.Release]*status.Status)
		}
	}

	if rf, ok := ret.Get(1).(func([]terra.Release, int, ...argocd.SyncOption) error); ok {
		r1 = rf(releases, maxParallel, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sync_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Sync_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - releases []terra.Release
//   - maxParallel int
//   - options ...argocd.SyncOption
func (_e *Sync_Expecter) Sync(releases interface{}, maxParallel interface{}, options ...interface{}) *Sync_Sync_Call {
	return &Sync_Sync_Call{Call: _e.mock.On("Sync",
		append([]interface{}{releases, maxParallel}, options...)...)}
}

func (_c *Sync_Sync_Call) Run(run func(releases []terra.Release, maxParallel int, options ...argocd.SyncOption)) *Sync_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]argocd.SyncOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(argocd.SyncOption)
			}
		}
		run(args[0].([]terra.Release), args[1].(int), variadicArgs...)
	})
	return _c
}

func (_c *Sync_Sync_Call) Return(_a0 map[terra.Release]*status.Status, _a1 error) *Sync_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Sync_Sync_Call) RunAndReturn(run func([]terra.Release, int, ...argocd.SyncOption) (map[terra.Release]*status.Status, error)) *Sync_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewSync creates a new instance of Sync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSync(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sync {
	mock := &Sync{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	podrun "github.com/broadinstitute/thelma/internal/thelma/ops/sql/podrun"
	mock "github.com/stretchr/testify/mock"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

type Runner_Expecter struct {
	mock *mock.Mock
}

func (_m *Runner) EXPECT() *Runner_Expecter {
	return &Runner_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields:
func (_m *Runner) Cleanup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Runner_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type Runner_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
func (_e *Runner_Expecter) Cleanup() *Runner_Cleanup_Call {
	return &Runner_Cleanup_Call{Call: _e.mock.On("Cleanup")}
}

func (_c *Runner_Cleanup_Call) Run(run func()) *Runner_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runner_Cleanup_Call) Return(_a0 error) *Runner_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runner_Cleanup_Call) RunAndReturn(run func() error) *Runner_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0
func (_m *Runner) Create(_a0 podrun.Spec) (podrun.Pod, error) {
	ret := _m.Called(_a0)

	var r0 podrun.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(podrun.Spec) (podrun.Pod, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(podrun.Spec) podrun.Pod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(podrun.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(podrun.Spec) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Runner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 podrun.Spec
func (_e *Runner_Expecter) Create(_a0 interface{}) *Runner_Create_Call {
	return &Runner_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *Runner_Create_Call) Run(run func(_a0 podrun.Spec)) *Runner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(podrun.Spec))
	})
	return _c
}

func (_c *Runner_Create_Call) Return(_a0 podrun.Pod, _a1 error) *Runner_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Runner_Create_Call) RunAndReturn(run func(podrun.Spec) (podrun.Pod, error)) *Runner_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRunner interface {
	mock.TestingT
	Cleanup(func())
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRunner(t mockConstructorTestingTNewRunner) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

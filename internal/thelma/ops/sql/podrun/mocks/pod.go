// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Pod is an autogenerated mock type for the Pod type
type Pod struct {
	mock.Mock
}

type Pod_Expecter struct {
	mock *mock.Mock
}

func (_m *Pod) EXPECT() *Pod_Expecter {
	return &Pod_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Pod) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pod_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Pod_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Pod_Expecter) Close() *Pod_Close_Call {
	return &Pod_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Pod_Close_Call) Run(run func()) *Pod_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Pod_Close_Call) Return(_a0 error) *Pod_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pod_Close_Call) RunAndReturn(run func() error) *Pod_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields:
func (_m *Pod) Delete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pod_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Pod_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
func (_e *Pod_Expecter) Delete() *Pod_Delete_Call {
	return &Pod_Delete_Call{Call: _e.mock.On("Delete")}
}

func (_c *Pod_Delete_Call) Run(run func()) *Pod_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Pod_Delete_Call) Return(_a0 error) *Pod_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pod_Delete_Call) RunAndReturn(run func() error) *Pod_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: cmd
func (_m *Pod) Exec(cmd []string) error {
	ret := _m.Called(cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pod_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Pod_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - cmd []string
func (_e *Pod_Expecter) Exec(cmd interface{}) *Pod_Exec_Call {
	return &Pod_Exec_Call{Call: _e.mock.On("Exec", cmd)}
}

func (_c *Pod_Exec_Call) Run(run func(cmd []string)) *Pod_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Pod_Exec_Call) Return(_a0 error) *Pod_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pod_Exec_Call) RunAndReturn(run func([]string) error) *Pod_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ExecInteractive provides a mock function with given fields: cmd
func (_m *Pod) ExecInteractive(cmd []string) error {
	ret := _m.Called(cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pod_ExecInteractive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecInteractive'
type Pod_ExecInteractive_Call struct {
	*mock.Call
}

// ExecInteractive is a helper method to define mock.On call
//   - cmd []string
func (_e *Pod_Expecter) ExecInteractive(cmd interface{}) *Pod_ExecInteractive_Call {
	return &Pod_ExecInteractive_Call{Call: _e.mock.On("ExecInteractive", cmd)}
}

func (_c *Pod_ExecInteractive_Call) Run(run func(cmd []string)) *Pod_ExecInteractive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Pod_ExecInteractive_Call) Return(_a0 error) *Pod_ExecInteractive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Pod_ExecInteractive_Call) RunAndReturn(run func([]string) error) *Pod_ExecInteractive_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPod interface {
	mock.TestingT
	Cleanup(func())
}

// NewPod creates a new instance of Pod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPod(t mockConstructorTestingTNewPod) *Pod {
	mock := &Pod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

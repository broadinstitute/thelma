// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	logs "github.com/broadinstitute/thelma/internal/thelma/ops/logs"
	mock "github.com/stretchr/testify/mock"

	sql "github.com/broadinstitute/thelma/internal/thelma/ops/sql"

	status "github.com/broadinstitute/thelma/internal/thelma/ops/status"

	sync "github.com/broadinstitute/thelma/internal/thelma/ops/sync"
)

// Ops is an autogenerated mock type for the Ops type
type Ops struct {
	mock.Mock
}

type Ops_Expecter struct {
	mock *mock.Mock
}

func (_m *Ops) EXPECT() *Ops_Expecter {
	return &Ops_Expecter{mock: &_m.Mock}
}

// Logs provides a mock function with given fields:
func (_m *Ops) Logs() logs.Logs {
	ret := _m.Called()

	var r0 logs.Logs
	if rf, ok := ret.Get(0).(func() logs.Logs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logs.Logs)
		}
	}

	return r0
}

// Ops_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type Ops_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
func (_e *Ops_Expecter) Logs() *Ops_Logs_Call {
	return &Ops_Logs_Call{Call: _e.mock.On("Logs")}
}

func (_c *Ops_Logs_Call) Run(run func()) *Ops_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ops_Logs_Call) Return(_a0 logs.Logs) *Ops_Logs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Ops_Logs_Call) RunAndReturn(run func() logs.Logs) *Ops_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// Sql provides a mock function with given fields:
func (_m *Ops) Sql() sql.Sql {
	ret := _m.Called()

	var r0 sql.Sql
	if rf, ok := ret.Get(0).(func() sql.Sql); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Sql)
		}
	}

	return r0
}

// Ops_Sql_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sql'
type Ops_Sql_Call struct {
	*mock.Call
}

// Sql is a helper method to define mock.On call
func (_e *Ops_Expecter) Sql() *Ops_Sql_Call {
	return &Ops_Sql_Call{Call: _e.mock.On("Sql")}
}

func (_c *Ops_Sql_Call) Run(run func()) *Ops_Sql_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ops_Sql_Call) Return(_a0 sql.Sql) *Ops_Sql_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Ops_Sql_Call) RunAndReturn(run func() sql.Sql) *Ops_Sql_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *Ops) Status() (status.Reader, error) {
	ret := _m.Called()

	var r0 status.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func() (status.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() status.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(status.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ops_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Ops_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Ops_Expecter) Status() *Ops_Status_Call {
	return &Ops_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Ops_Status_Call) Run(run func()) *Ops_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ops_Status_Call) Return(_a0 status.Reader, _a1 error) *Ops_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Ops_Status_Call) RunAndReturn(run func() (status.Reader, error)) *Ops_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields:
func (_m *Ops) Sync() (sync.Sync, error) {
	ret := _m.Called()

	var r0 sync.Sync
	var r1 error
	if rf, ok := ret.Get(0).(func() (sync.Sync, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() sync.Sync); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sync.Sync)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ops_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Ops_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *Ops_Expecter) Sync() *Ops_Sync_Call {
	return &Ops_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *Ops_Sync_Call) Run(run func()) *Ops_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Ops_Sync_Call) Return(_a0 sync.Sync, _a1 error) *Ops_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Ops_Sync_Call) RunAndReturn(run func() (sync.Sync, error)) *Ops_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewOps creates a new instance of Ops. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ops {
	mock := &Ops{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	kubecfg "github.com/broadinstitute/thelma/internal/thelma/clients/kubernetes/kubecfg"
	kubectl "github.com/broadinstitute/thelma/internal/thelma/toolbox/kubectl"

	kubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"

	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
)

// Clients is an autogenerated mock type for the Clients type
type Clients struct {
	mock.Mock
}

type Clients_Expecter struct {
	mock *mock.Mock
}

func (_m *Clients) EXPECT() *Clients_Expecter {
	return &Clients_Expecter{mock: &_m.Mock}
}

// ForKubectx provides a mock function with given fields: kubectx
func (_m *Clients) ForKubectx(kubectx kubecfg.Kubectx) (kubernetes.Interface, error) {
	ret := _m.Called(kubectx)

	var r0 kubernetes.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(kubecfg.Kubectx) (kubernetes.Interface, error)); ok {
		return rf(kubectx)
	}
	if rf, ok := ret.Get(0).(func(kubecfg.Kubectx) kubernetes.Interface); ok {
		r0 = rf(kubectx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(kubecfg.Kubectx) error); ok {
		r1 = rf(kubectx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients_ForKubectx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForKubectx'
type Clients_ForKubectx_Call struct {
	*mock.Call
}

// ForKubectx is a helper method to define mock.On call
//   - kubectx kubecfg.Kubectx
func (_e *Clients_Expecter) ForKubectx(kubectx interface{}) *Clients_ForKubectx_Call {
	return &Clients_ForKubectx_Call{Call: _e.mock.On("ForKubectx", kubectx)}
}

func (_c *Clients_ForKubectx_Call) Run(run func(kubectx kubecfg.Kubectx)) *Clients_ForKubectx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(kubecfg.Kubectx))
	})
	return _c
}

func (_c *Clients_ForKubectx_Call) Return(_a0 kubernetes.Interface, _a1 error) *Clients_ForKubectx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Clients_ForKubectx_Call) RunAndReturn(run func(kubecfg.Kubectx) (kubernetes.Interface, error)) *Clients_ForKubectx_Call {
	_c.Call.Return(run)
	return _c
}

// ForRelease provides a mock function with given fields: release
func (_m *Clients) ForRelease(release terra.Release) (kubernetes.Interface, error) {
	ret := _m.Called(release)

	var r0 kubernetes.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(terra.Release) (kubernetes.Interface, error)); ok {
		return rf(release)
	}
	if rf, ok := ret.Get(0).(func(terra.Release) kubernetes.Interface); ok {
		r0 = rf(release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(terra.Release) error); ok {
		r1 = rf(release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients_ForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForRelease'
type Clients_ForRelease_Call struct {
	*mock.Call
}

// ForRelease is a helper method to define mock.On call
//   - release terra.Release
func (_e *Clients_Expecter) ForRelease(release interface{}) *Clients_ForRelease_Call {
	return &Clients_ForRelease_Call{Call: _e.mock.On("ForRelease", release)}
}

func (_c *Clients_ForRelease_Call) Run(run func(release terra.Release)) *Clients_ForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.Release))
	})
	return _c
}

func (_c *Clients_ForRelease_Call) Return(_a0 kubernetes.Interface, _a1 error) *Clients_ForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Clients_ForRelease_Call) RunAndReturn(run func(terra.Release) (kubernetes.Interface, error)) *Clients_ForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// Kubecfg provides a mock function with given fields:
func (_m *Clients) Kubecfg() (kubecfg.Kubeconfig, error) {
	ret := _m.Called()

	var r0 kubecfg.Kubeconfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (kubecfg.Kubeconfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() kubecfg.Kubeconfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubecfg.Kubeconfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients_Kubecfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kubecfg'
type Clients_Kubecfg_Call struct {
	*mock.Call
}

// Kubecfg is a helper method to define mock.On call
func (_e *Clients_Expecter) Kubecfg() *Clients_Kubecfg_Call {
	return &Clients_Kubecfg_Call{Call: _e.mock.On("Kubecfg")}
}

func (_c *Clients_Kubecfg_Call) Run(run func()) *Clients_Kubecfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Clients_Kubecfg_Call) Return(_a0 kubecfg.Kubeconfig, _a1 error) *Clients_Kubecfg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Clients_Kubecfg_Call) RunAndReturn(run func() (kubecfg.Kubeconfig, error)) *Clients_Kubecfg_Call {
	_c.Call.Return(run)
	return _c
}

// Kubectl provides a mock function with given fields:
func (_m *Clients) Kubectl() (kubectl.Kubectl, error) {
	ret := _m.Called()

	var r0 kubectl.Kubectl
	var r1 error
	if rf, ok := ret.Get(0).(func() (kubectl.Kubectl, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() kubectl.Kubectl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubectl.Kubectl)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clients_Kubectl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kubectl'
type Clients_Kubectl_Call struct {
	*mock.Call
}

// Kubectl is a helper method to define mock.On call
func (_e *Clients_Expecter) Kubectl() *Clients_Kubectl_Call {
	return &Clients_Kubectl_Call{Call: _e.mock.On("Kubectl")}
}

func (_c *Clients_Kubectl_Call) Run(run func()) *Clients_Kubectl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Clients_Kubectl_Call) Return(_a0 kubectl.Kubectl, _a1 error) *Clients_Kubectl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Clients_Kubectl_Call) RunAndReturn(run func() (kubectl.Kubectl, error)) *Clients_Kubectl_Call {
	_c.Call.Return(run)
	return _c
}

// NewClients creates a new instance of Clients. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClients(t interface {
	mock.TestingT
	Cleanup(func())
}) *Clients {
	mock := &Clients{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

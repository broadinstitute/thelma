// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	io "io"

	bucket "github.com/broadinstitute/thelma/internal/thelma/clients/google/bucket"

	mock "github.com/stretchr/testify/mock"

	object "github.com/broadinstitute/thelma/internal/thelma/clients/google/bucket/object"

	storage "cloud.google.com/go/storage"

	time "time"
)

// Bucket is an autogenerated mock type for the Bucket type
type Bucket struct {
	mock.Mock
}

type Bucket_Expecter struct {
	mock *mock.Mock
}

func (_m *Bucket) EXPECT() *Bucket_Expecter {
	return &Bucket_Expecter{mock: &_m.Mock}
}

// Attrs provides a mock function with given fields: objectName
func (_m *Bucket) Attrs(objectName string) (*storage.ObjectAttrs, error) {
	ret := _m.Called(objectName)

	var r0 *storage.ObjectAttrs
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*storage.ObjectAttrs, error)); ok {
		return rf(objectName)
	}
	if rf, ok := ret.Get(0).(func(string) *storage.ObjectAttrs); ok {
		r0 = rf(objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bucket_Attrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attrs'
type Bucket_Attrs_Call struct {
	*mock.Call
}

// Attrs is a helper method to define mock.On call
//   - objectName string
func (_e *Bucket_Expecter) Attrs(objectName interface{}) *Bucket_Attrs_Call {
	return &Bucket_Attrs_Call{Call: _e.mock.On("Attrs", objectName)}
}

func (_c *Bucket_Attrs_Call) Run(run func(objectName string)) *Bucket_Attrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Bucket_Attrs_Call) Return(_a0 *storage.ObjectAttrs, _a1 error) *Bucket_Attrs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Bucket_Attrs_Call) RunAndReturn(run func(string) (*storage.ObjectAttrs, error)) *Bucket_Attrs_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Bucket) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Bucket_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Bucket_Expecter) Close() *Bucket_Close_Call {
	return &Bucket_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Bucket_Close_Call) Run(run func()) *Bucket_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_Close_Call) Return(_a0 error) *Bucket_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Close_Call) RunAndReturn(run func() error) *Bucket_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: objectName
func (_m *Bucket) Delete(objectName string) error {
	ret := _m.Called(objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Bucket_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - objectName string
func (_e *Bucket_Expecter) Delete(objectName interface{}) *Bucket_Delete_Call {
	return &Bucket_Delete_Call{Call: _e.mock.On("Delete", objectName)}
}

func (_c *Bucket_Delete_Call) Run(run func(objectName string)) *Bucket_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Bucket_Delete_Call) Return(_a0 error) *Bucket_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Delete_Call) RunAndReturn(run func(string) error) *Bucket_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: objectName, localPath
func (_m *Bucket) Download(objectName string, localPath string) error {
	ret := _m.Called(objectName, localPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(objectName, localPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type Bucket_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - objectName string
//   - localPath string
func (_e *Bucket_Expecter) Download(objectName interface{}, localPath interface{}) *Bucket_Download_Call {
	return &Bucket_Download_Call{Call: _e.mock.On("Download", objectName, localPath)}
}

func (_c *Bucket_Download_Call) Run(run func(objectName string, localPath string)) *Bucket_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Bucket_Download_Call) Return(_a0 error) *Bucket_Download_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Download_Call) RunAndReturn(run func(string, string) error) *Bucket_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: objectName
func (_m *Bucket) Exists(objectName string) (bool, error) {
	ret := _m.Called(objectName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(objectName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bucket_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Bucket_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - objectName string
func (_e *Bucket_Expecter) Exists(objectName interface{}) *Bucket_Exists_Call {
	return &Bucket_Exists_Call{Call: _e.mock.On("Exists", objectName)}
}

func (_c *Bucket_Exists_Call) Run(run func(objectName string)) *Bucket_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Bucket_Exists_Call) Return(_a0 bool, _a1 error) *Bucket_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Bucket_Exists_Call) RunAndReturn(run func(string) (bool, error)) *Bucket_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Bucket) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Bucket_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Bucket_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Bucket_Expecter) Name() *Bucket_Name_Call {
	return &Bucket_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Bucket_Name_Call) Run(run func()) *Bucket_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bucket_Name_Call) Return(_a0 string) *Bucket_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Name_Call) RunAndReturn(run func() string) *Bucket_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocker provides a mock function with given fields: objectName, maxWait, options
func (_m *Bucket) NewLocker(objectName string, maxWait time.Duration, options ...bucket.LockerOption) bucket.Locker {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, objectName, maxWait)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bucket.Locker
	if rf, ok := ret.Get(0).(func(string, time.Duration, ...bucket.LockerOption) bucket.Locker); ok {
		r0 = rf(objectName, maxWait, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bucket.Locker)
		}
	}

	return r0
}

// Bucket_NewLocker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewLocker'
type Bucket_NewLocker_Call struct {
	*mock.Call
}

// NewLocker is a helper method to define mock.On call
//   - objectName string
//   - maxWait time.Duration
//   - options ...bucket.LockerOption
func (_e *Bucket_Expecter) NewLocker(objectName interface{}, maxWait interface{}, options ...interface{}) *Bucket_NewLocker_Call {
	return &Bucket_NewLocker_Call{Call: _e.mock.On("NewLocker",
		append([]interface{}{objectName, maxWait}, options...)...)}
}

func (_c *Bucket_NewLocker_Call) Run(run func(objectName string, maxWait time.Duration, options ...bucket.LockerOption)) *Bucket_NewLocker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]bucket.LockerOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(bucket.LockerOption)
			}
		}
		run(args[0].(string), args[1].(time.Duration), variadicArgs...)
	})
	return _c
}

func (_c *Bucket_NewLocker_Call) Return(_a0 bucket.Locker) *Bucket_NewLocker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_NewLocker_Call) RunAndReturn(run func(string, time.Duration, ...bucket.LockerOption) bucket.Locker) *Bucket_NewLocker_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: objectName
func (_m *Bucket) Read(objectName string) ([]byte, error) {
	ret := _m.Called(objectName)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(objectName)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bucket_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Bucket_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - objectName string
func (_e *Bucket_Expecter) Read(objectName interface{}) *Bucket_Read_Call {
	return &Bucket_Read_Call{Call: _e.mock.On("Read", objectName)}
}

func (_c *Bucket_Read_Call) Run(run func(objectName string)) *Bucket_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Bucket_Read_Call) Return(_a0 []byte, _a1 error) *Bucket_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Bucket_Read_Call) RunAndReturn(run func(string) ([]byte, error)) *Bucket_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: objectName, attrs
func (_m *Bucket) Update(objectName string, attrs ...object.AttrSetter) error {
	_va := make([]interface{}, len(attrs))
	for _i := range attrs {
		_va[_i] = attrs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, objectName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...object.AttrSetter) error); ok {
		r0 = rf(objectName, attrs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Bucket_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - objectName string
//   - attrs ...object.AttrSetter
func (_e *Bucket_Expecter) Update(objectName interface{}, attrs ...interface{}) *Bucket_Update_Call {
	return &Bucket_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{objectName}, attrs...)...)}
}

func (_c *Bucket_Update_Call) Run(run func(objectName string, attrs ...object.AttrSetter)) *Bucket_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]object.AttrSetter, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(object.AttrSetter)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Bucket_Update_Call) Return(_a0 error) *Bucket_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Update_Call) RunAndReturn(run func(string, ...object.AttrSetter) error) *Bucket_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: localPath, objectName, attrs
func (_m *Bucket) Upload(localPath string, objectName string, attrs ...object.AttrSetter) error {
	_va := make([]interface{}, len(attrs))
	for _i := range attrs {
		_va[_i] = attrs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, localPath, objectName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...object.AttrSetter) error); ok {
		r0 = rf(localPath, objectName, attrs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type Bucket_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - localPath string
//   - objectName string
//   - attrs ...object.AttrSetter
func (_e *Bucket_Expecter) Upload(localPath interface{}, objectName interface{}, attrs ...interface{}) *Bucket_Upload_Call {
	return &Bucket_Upload_Call{Call: _e.mock.On("Upload",
		append([]interface{}{localPath, objectName}, attrs...)...)}
}

func (_c *Bucket_Upload_Call) Run(run func(localPath string, objectName string, attrs ...object.AttrSetter)) *Bucket_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]object.AttrSetter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(object.AttrSetter)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Bucket_Upload_Call) Return(_a0 error) *Bucket_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Upload_Call) RunAndReturn(run func(string, string, ...object.AttrSetter) error) *Bucket_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: objectName, content, attrs
func (_m *Bucket) Write(objectName string, content []byte, attrs ...object.AttrSetter) error {
	_va := make([]interface{}, len(attrs))
	for _i := range attrs {
		_va[_i] = attrs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, objectName, content)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, ...object.AttrSetter) error); ok {
		r0 = rf(objectName, content, attrs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Bucket_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - objectName string
//   - content []byte
//   - attrs ...object.AttrSetter
func (_e *Bucket_Expecter) Write(objectName interface{}, content interface{}, attrs ...interface{}) *Bucket_Write_Call {
	return &Bucket_Write_Call{Call: _e.mock.On("Write",
		append([]interface{}{objectName, content}, attrs...)...)}
}

func (_c *Bucket_Write_Call) Run(run func(objectName string, content []byte, attrs ...object.AttrSetter)) *Bucket_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]object.AttrSetter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(object.AttrSetter)
			}
		}
		run(args[0].(string), args[1].([]byte), variadicArgs...)
	})
	return _c
}

func (_c *Bucket_Write_Call) Return(_a0 error) *Bucket_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Write_Call) RunAndReturn(run func(string, []byte, ...object.AttrSetter) error) *Bucket_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFromStream provides a mock function with given fields: objectName, reader, attrs
func (_m *Bucket) WriteFromStream(objectName string, reader io.Reader, attrs ...object.AttrSetter) error {
	_va := make([]interface{}, len(attrs))
	for _i := range attrs {
		_va[_i] = attrs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, objectName, reader)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Reader, ...object.AttrSetter) error); ok {
		r0 = rf(objectName, reader, attrs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bucket_WriteFromStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFromStream'
type Bucket_WriteFromStream_Call struct {
	*mock.Call
}

// WriteFromStream is a helper method to define mock.On call
//   - objectName string
//   - reader io.Reader
//   - attrs ...object.AttrSetter
func (_e *Bucket_Expecter) WriteFromStream(objectName interface{}, reader interface{}, attrs ...interface{}) *Bucket_WriteFromStream_Call {
	return &Bucket_WriteFromStream_Call{Call: _e.mock.On("WriteFromStream",
		append([]interface{}{objectName, reader}, attrs...)...)}
}

func (_c *Bucket_WriteFromStream_Call) Run(run func(objectName string, reader io.Reader, attrs ...object.AttrSetter)) *Bucket_WriteFromStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]object.AttrSetter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(object.AttrSetter)
			}
		}
		run(args[0].(string), args[1].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *Bucket_WriteFromStream_Call) Return(_a0 error) *Bucket_WriteFromStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_WriteFromStream_Call) RunAndReturn(run func(string, io.Reader, ...object.AttrSetter) error) *Bucket_WriteFromStream_Call {
	_c.Call.Return(run)
	return _c
}

// Writer provides a mock function with given fields: objectName
func (_m *Bucket) Writer(objectName string) io.WriteCloser {
	ret := _m.Called(objectName)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	return r0
}

// Bucket_Writer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Writer'
type Bucket_Writer_Call struct {
	*mock.Call
}

// Writer is a helper method to define mock.On call
//   - objectName string
func (_e *Bucket_Expecter) Writer(objectName interface{}) *Bucket_Writer_Call {
	return &Bucket_Writer_Call{Call: _e.mock.On("Writer", objectName)}
}

func (_c *Bucket_Writer_Call) Run(run func(objectName string)) *Bucket_Writer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Bucket_Writer_Call) Return(_a0 io.WriteCloser) *Bucket_Writer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Bucket_Writer_Call) RunAndReturn(run func(string) io.WriteCloser) *Bucket_Writer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBucket interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucket creates a new instance of Bucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucket(t mockConstructorTestingTNewBucket) *Bucket {
	mock := &Bucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

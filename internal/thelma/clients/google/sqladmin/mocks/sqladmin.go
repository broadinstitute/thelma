// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sqladmin "google.golang.org/api/sqladmin/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: project, instanceName, user
func (_m *Client) AddUser(project string, instanceName string, user *sqladmin.User) error {
	ret := _m.Called(project, instanceName, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *sqladmin.User) error); ok {
		r0 = rf(project, instanceName, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type Client_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - project string
//   - instanceName string
//   - user *sqladmin.User
func (_e *Client_Expecter) AddUser(project interface{}, instanceName interface{}, user interface{}) *Client_AddUser_Call {
	return &Client_AddUser_Call{Call: _e.mock.On("AddUser", project, instanceName, user)}
}

func (_c *Client_AddUser_Call) Run(run func(project string, instanceName string, user *sqladmin.User)) *Client_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*sqladmin.User))
	})
	return _c
}

func (_c *Client_AddUser_Call) Return(_a0 error) *Client_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteUser provides a mock function with given fields: project, instanceName, username
func (_m *Client) DeleteUser(project string, instanceName string, username string) error {
	ret := _m.Called(project, instanceName, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(project, instanceName, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Client_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - project string
//   - instanceName string
//   - username string
func (_e *Client_Expecter) DeleteUser(project interface{}, instanceName interface{}, username interface{}) *Client_DeleteUser_Call {
	return &Client_DeleteUser_Call{Call: _e.mock.On("DeleteUser", project, instanceName, username)}
}

func (_c *Client_DeleteUser_Call) Run(run func(project string, instanceName string, username string)) *Client_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_DeleteUser_Call) Return(_a0 error) *Client_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetInstance provides a mock function with given fields: project, instanceName
func (_m *Client) GetInstance(project string, instanceName string) (*sqladmin.DatabaseInstance, error) {
	ret := _m.Called(project, instanceName)

	var r0 *sqladmin.DatabaseInstance
	if rf, ok := ret.Get(0).(func(string, string) *sqladmin.DatabaseInstance); ok {
		r0 = rf(project, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqladmin.DatabaseInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type Client_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - project string
//   - instanceName string
func (_e *Client_Expecter) GetInstance(project interface{}, instanceName interface{}) *Client_GetInstance_Call {
	return &Client_GetInstance_Call{Call: _e.mock.On("GetInstance", project, instanceName)}
}

func (_c *Client_GetInstance_Call) Run(run func(project string, instanceName string)) *Client_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Client_GetInstance_Call) Return(_a0 *sqladmin.DatabaseInstance, _a1 error) *Client_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetInstanceLocalUsers provides a mock function with given fields: project, instanceName
func (_m *Client) GetInstanceLocalUsers(project string, instanceName string) ([]string, error) {
	ret := _m.Called(project, instanceName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(project, instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstanceLocalUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceLocalUsers'
type Client_GetInstanceLocalUsers_Call struct {
	*mock.Call
}

// GetInstanceLocalUsers is a helper method to define mock.On call
//   - project string
//   - instanceName string
func (_e *Client_Expecter) GetInstanceLocalUsers(project interface{}, instanceName interface{}) *Client_GetInstanceLocalUsers_Call {
	return &Client_GetInstanceLocalUsers_Call{Call: _e.mock.On("GetInstanceLocalUsers", project, instanceName)}
}

func (_c *Client_GetInstanceLocalUsers_Call) Run(run func(project string, instanceName string)) *Client_GetInstanceLocalUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Client_GetInstanceLocalUsers_Call) Return(_a0 []string, _a1 error) *Client_GetInstanceLocalUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchInstance provides a mock function with given fields: project, instanceName, patchRequest
func (_m *Client) PatchInstance(project string, instanceName string, patchRequest *sqladmin.DatabaseInstance) error {
	ret := _m.Called(project, instanceName, patchRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *sqladmin.DatabaseInstance) error); ok {
		r0 = rf(project, instanceName, patchRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PatchInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchInstance'
type Client_PatchInstance_Call struct {
	*mock.Call
}

// PatchInstance is a helper method to define mock.On call
//   - project string
//   - instanceName string
//   - patchRequest *sqladmin.DatabaseInstance
func (_e *Client_Expecter) PatchInstance(project interface{}, instanceName interface{}, patchRequest interface{}) *Client_PatchInstance_Call {
	return &Client_PatchInstance_Call{Call: _e.mock.On("PatchInstance", project, instanceName, patchRequest)}
}

func (_c *Client_PatchInstance_Call) Run(run func(project string, instanceName string, patchRequest *sqladmin.DatabaseInstance)) *Client_PatchInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*sqladmin.DatabaseInstance))
	})
	return _c
}

func (_c *Client_PatchInstance_Call) Return(_a0 error) *Client_PatchInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

// ResetPassword provides a mock function with given fields: project, instanceName, username, password
func (_m *Client) ResetPassword(project string, instanceName string, username string, password string) error {
	ret := _m.Called(project, instanceName, username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(project, instanceName, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type Client_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - project string
//   - instanceName string
//   - username string
//   - password string
func (_e *Client_Expecter) ResetPassword(project interface{}, instanceName interface{}, username interface{}, password interface{}) *Client_ResetPassword_Call {
	return &Client_ResetPassword_Call{Call: _e.mock.On("ResetPassword", project, instanceName, username, password)}
}

func (_c *Client_ResetPassword_Call) Run(run func(project string, instanceName string, username string, password string)) *Client_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_ResetPassword_Call) Return(_a0 error) *Client_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

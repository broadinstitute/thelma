// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	container "google.golang.org/genproto/googleapis/container/v1"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// ClusterManagerServer is an autogenerated mock type for the ClusterManagerServer type
type ClusterManagerServer struct {
	mock.Mock
}

type ClusterManagerServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterManagerServer) EXPECT() *ClusterManagerServer_Expecter {
	return &ClusterManagerServer_Expecter{mock: &_m.Mock}
}

// CancelOperation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CancelOperation(_a0 context.Context, _a1 *container.CancelOperationRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *container.CancelOperationRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CancelOperationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_CancelOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOperation'
type ClusterManagerServer_CancelOperation_Call struct {
	*mock.Call
}

// CancelOperation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.CancelOperationRequest
func (_e *ClusterManagerServer_Expecter) CancelOperation(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_CancelOperation_Call {
	return &ClusterManagerServer_CancelOperation_Call{Call: _e.mock.On("CancelOperation", _a0, _a1)}
}

func (_c *ClusterManagerServer_CancelOperation_Call) Run(run func(_a0 context.Context, _a1 *container.CancelOperationRequest)) *ClusterManagerServer_CancelOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.CancelOperationRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_CancelOperation_Call) Return(_a0 *emptypb.Empty, _a1 error) *ClusterManagerServer_CancelOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CompleteIPRotation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CompleteIPRotation(_a0 context.Context, _a1 *container.CompleteIPRotationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CompleteIPRotationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CompleteIPRotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_CompleteIPRotation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteIPRotation'
type ClusterManagerServer_CompleteIPRotation_Call struct {
	*mock.Call
}

// CompleteIPRotation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.CompleteIPRotationRequest
func (_e *ClusterManagerServer_Expecter) CompleteIPRotation(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_CompleteIPRotation_Call {
	return &ClusterManagerServer_CompleteIPRotation_Call{Call: _e.mock.On("CompleteIPRotation", _a0, _a1)}
}

func (_c *ClusterManagerServer_CompleteIPRotation_Call) Run(run func(_a0 context.Context, _a1 *container.CompleteIPRotationRequest)) *ClusterManagerServer_CompleteIPRotation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.CompleteIPRotationRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_CompleteIPRotation_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_CompleteIPRotation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CompleteNodePoolUpgrade provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CompleteNodePoolUpgrade(_a0 context.Context, _a1 *container.CompleteNodePoolUpgradeRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *container.CompleteNodePoolUpgradeRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CompleteNodePoolUpgradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_CompleteNodePoolUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteNodePoolUpgrade'
type ClusterManagerServer_CompleteNodePoolUpgrade_Call struct {
	*mock.Call
}

// CompleteNodePoolUpgrade is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.CompleteNodePoolUpgradeRequest
func (_e *ClusterManagerServer_Expecter) CompleteNodePoolUpgrade(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_CompleteNodePoolUpgrade_Call {
	return &ClusterManagerServer_CompleteNodePoolUpgrade_Call{Call: _e.mock.On("CompleteNodePoolUpgrade", _a0, _a1)}
}

func (_c *ClusterManagerServer_CompleteNodePoolUpgrade_Call) Run(run func(_a0 context.Context, _a1 *container.CompleteNodePoolUpgradeRequest)) *ClusterManagerServer_CompleteNodePoolUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.CompleteNodePoolUpgradeRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_CompleteNodePoolUpgrade_Call) Return(_a0 *emptypb.Empty, _a1 error) *ClusterManagerServer_CompleteNodePoolUpgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CreateCluster(_a0 context.Context, _a1 *container.CreateClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CreateClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CreateClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type ClusterManagerServer_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.CreateClusterRequest
func (_e *ClusterManagerServer_Expecter) CreateCluster(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_CreateCluster_Call {
	return &ClusterManagerServer_CreateCluster_Call{Call: _e.mock.On("CreateCluster", _a0, _a1)}
}

func (_c *ClusterManagerServer_CreateCluster_Call) Run(run func(_a0 context.Context, _a1 *container.CreateClusterRequest)) *ClusterManagerServer_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.CreateClusterRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_CreateCluster_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_CreateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CreateNodePool(_a0 context.Context, _a1 *container.CreateNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CreateNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CreateNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_CreateNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNodePool'
type ClusterManagerServer_CreateNodePool_Call struct {
	*mock.Call
}

// CreateNodePool is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.CreateNodePoolRequest
func (_e *ClusterManagerServer_Expecter) CreateNodePool(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_CreateNodePool_Call {
	return &ClusterManagerServer_CreateNodePool_Call{Call: _e.mock.On("CreateNodePool", _a0, _a1)}
}

func (_c *ClusterManagerServer_CreateNodePool_Call) Run(run func(_a0 context.Context, _a1 *container.CreateNodePoolRequest)) *ClusterManagerServer_CreateNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.CreateNodePoolRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_CreateNodePool_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_CreateNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) DeleteCluster(_a0 context.Context, _a1 *container.DeleteClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.DeleteClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.DeleteClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type ClusterManagerServer_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.DeleteClusterRequest
func (_e *ClusterManagerServer_Expecter) DeleteCluster(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_DeleteCluster_Call {
	return &ClusterManagerServer_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", _a0, _a1)}
}

func (_c *ClusterManagerServer_DeleteCluster_Call) Run(run func(_a0 context.Context, _a1 *container.DeleteClusterRequest)) *ClusterManagerServer_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.DeleteClusterRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_DeleteCluster_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_DeleteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) DeleteNodePool(_a0 context.Context, _a1 *container.DeleteNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.DeleteNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.DeleteNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_DeleteNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNodePool'
type ClusterManagerServer_DeleteNodePool_Call struct {
	*mock.Call
}

// DeleteNodePool is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.DeleteNodePoolRequest
func (_e *ClusterManagerServer_Expecter) DeleteNodePool(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_DeleteNodePool_Call {
	return &ClusterManagerServer_DeleteNodePool_Call{Call: _e.mock.On("DeleteNodePool", _a0, _a1)}
}

func (_c *ClusterManagerServer_DeleteNodePool_Call) Run(run func(_a0 context.Context, _a1 *container.DeleteNodePoolRequest)) *ClusterManagerServer_DeleteNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.DeleteNodePoolRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_DeleteNodePool_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_DeleteNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetCluster(_a0 context.Context, _a1 *container.GetClusterRequest) (*container.Cluster, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Cluster
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetClusterRequest) *container.Cluster); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ClusterManagerServer_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.GetClusterRequest
func (_e *ClusterManagerServer_Expecter) GetCluster(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_GetCluster_Call {
	return &ClusterManagerServer_GetCluster_Call{Call: _e.mock.On("GetCluster", _a0, _a1)}
}

func (_c *ClusterManagerServer_GetCluster_Call) Run(run func(_a0 context.Context, _a1 *container.GetClusterRequest)) *ClusterManagerServer_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.GetClusterRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_GetCluster_Call) Return(_a0 *container.Cluster, _a1 error) *ClusterManagerServer_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetJSONWebKeys provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetJSONWebKeys(_a0 context.Context, _a1 *container.GetJSONWebKeysRequest) (*container.GetJSONWebKeysResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.GetJSONWebKeysResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetJSONWebKeysRequest) *container.GetJSONWebKeysResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.GetJSONWebKeysResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetJSONWebKeysRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_GetJSONWebKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSONWebKeys'
type ClusterManagerServer_GetJSONWebKeys_Call struct {
	*mock.Call
}

// GetJSONWebKeys is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.GetJSONWebKeysRequest
func (_e *ClusterManagerServer_Expecter) GetJSONWebKeys(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_GetJSONWebKeys_Call {
	return &ClusterManagerServer_GetJSONWebKeys_Call{Call: _e.mock.On("GetJSONWebKeys", _a0, _a1)}
}

func (_c *ClusterManagerServer_GetJSONWebKeys_Call) Run(run func(_a0 context.Context, _a1 *container.GetJSONWebKeysRequest)) *ClusterManagerServer_GetJSONWebKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.GetJSONWebKeysRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_GetJSONWebKeys_Call) Return(_a0 *container.GetJSONWebKeysResponse, _a1 error) *ClusterManagerServer_GetJSONWebKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetNodePool(_a0 context.Context, _a1 *container.GetNodePoolRequest) (*container.NodePool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.NodePool
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetNodePoolRequest) *container.NodePool); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_GetNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodePool'
type ClusterManagerServer_GetNodePool_Call struct {
	*mock.Call
}

// GetNodePool is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.GetNodePoolRequest
func (_e *ClusterManagerServer_Expecter) GetNodePool(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_GetNodePool_Call {
	return &ClusterManagerServer_GetNodePool_Call{Call: _e.mock.On("GetNodePool", _a0, _a1)}
}

func (_c *ClusterManagerServer_GetNodePool_Call) Run(run func(_a0 context.Context, _a1 *container.GetNodePoolRequest)) *ClusterManagerServer_GetNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.GetNodePoolRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_GetNodePool_Call) Return(_a0 *container.NodePool, _a1 error) *ClusterManagerServer_GetNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOperation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetOperation(_a0 context.Context, _a1 *container.GetOperationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetOperationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetOperationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_GetOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperation'
type ClusterManagerServer_GetOperation_Call struct {
	*mock.Call
}

// GetOperation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.GetOperationRequest
func (_e *ClusterManagerServer_Expecter) GetOperation(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_GetOperation_Call {
	return &ClusterManagerServer_GetOperation_Call{Call: _e.mock.On("GetOperation", _a0, _a1)}
}

func (_c *ClusterManagerServer_GetOperation_Call) Run(run func(_a0 context.Context, _a1 *container.GetOperationRequest)) *ClusterManagerServer_GetOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.GetOperationRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_GetOperation_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_GetOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetServerConfig provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetServerConfig(_a0 context.Context, _a1 *container.GetServerConfigRequest) (*container.ServerConfig, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ServerConfig
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetServerConfigRequest) *container.ServerConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ServerConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetServerConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_GetServerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerConfig'
type ClusterManagerServer_GetServerConfig_Call struct {
	*mock.Call
}

// GetServerConfig is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.GetServerConfigRequest
func (_e *ClusterManagerServer_Expecter) GetServerConfig(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_GetServerConfig_Call {
	return &ClusterManagerServer_GetServerConfig_Call{Call: _e.mock.On("GetServerConfig", _a0, _a1)}
}

func (_c *ClusterManagerServer_GetServerConfig_Call) Run(run func(_a0 context.Context, _a1 *container.GetServerConfigRequest)) *ClusterManagerServer_GetServerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.GetServerConfigRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_GetServerConfig_Call) Return(_a0 *container.ServerConfig, _a1 error) *ClusterManagerServer_GetServerConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListClusters provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListClusters(_a0 context.Context, _a1 *container.ListClustersRequest) (*container.ListClustersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListClustersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListClustersRequest) *container.ListClustersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListClustersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListClustersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type ClusterManagerServer_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.ListClustersRequest
func (_e *ClusterManagerServer_Expecter) ListClusters(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_ListClusters_Call {
	return &ClusterManagerServer_ListClusters_Call{Call: _e.mock.On("ListClusters", _a0, _a1)}
}

func (_c *ClusterManagerServer_ListClusters_Call) Run(run func(_a0 context.Context, _a1 *container.ListClustersRequest)) *ClusterManagerServer_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.ListClustersRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_ListClusters_Call) Return(_a0 *container.ListClustersResponse, _a1 error) *ClusterManagerServer_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListNodePools provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListNodePools(_a0 context.Context, _a1 *container.ListNodePoolsRequest) (*container.ListNodePoolsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListNodePoolsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListNodePoolsRequest) *container.ListNodePoolsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListNodePoolsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListNodePoolsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_ListNodePools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodePools'
type ClusterManagerServer_ListNodePools_Call struct {
	*mock.Call
}

// ListNodePools is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.ListNodePoolsRequest
func (_e *ClusterManagerServer_Expecter) ListNodePools(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_ListNodePools_Call {
	return &ClusterManagerServer_ListNodePools_Call{Call: _e.mock.On("ListNodePools", _a0, _a1)}
}

func (_c *ClusterManagerServer_ListNodePools_Call) Run(run func(_a0 context.Context, _a1 *container.ListNodePoolsRequest)) *ClusterManagerServer_ListNodePools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.ListNodePoolsRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_ListNodePools_Call) Return(_a0 *container.ListNodePoolsResponse, _a1 error) *ClusterManagerServer_ListNodePools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListOperations provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListOperations(_a0 context.Context, _a1 *container.ListOperationsRequest) (*container.ListOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListOperationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListOperationsRequest) *container.ListOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListOperationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type ClusterManagerServer_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.ListOperationsRequest
func (_e *ClusterManagerServer_Expecter) ListOperations(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_ListOperations_Call {
	return &ClusterManagerServer_ListOperations_Call{Call: _e.mock.On("ListOperations", _a0, _a1)}
}

func (_c *ClusterManagerServer_ListOperations_Call) Run(run func(_a0 context.Context, _a1 *container.ListOperationsRequest)) *ClusterManagerServer_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.ListOperationsRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_ListOperations_Call) Return(_a0 *container.ListOperationsResponse, _a1 error) *ClusterManagerServer_ListOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListUsableSubnetworks provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListUsableSubnetworks(_a0 context.Context, _a1 *container.ListUsableSubnetworksRequest) (*container.ListUsableSubnetworksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListUsableSubnetworksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListUsableSubnetworksRequest) *container.ListUsableSubnetworksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListUsableSubnetworksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListUsableSubnetworksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_ListUsableSubnetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsableSubnetworks'
type ClusterManagerServer_ListUsableSubnetworks_Call struct {
	*mock.Call
}

// ListUsableSubnetworks is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.ListUsableSubnetworksRequest
func (_e *ClusterManagerServer_Expecter) ListUsableSubnetworks(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_ListUsableSubnetworks_Call {
	return &ClusterManagerServer_ListUsableSubnetworks_Call{Call: _e.mock.On("ListUsableSubnetworks", _a0, _a1)}
}

func (_c *ClusterManagerServer_ListUsableSubnetworks_Call) Run(run func(_a0 context.Context, _a1 *container.ListUsableSubnetworksRequest)) *ClusterManagerServer_ListUsableSubnetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.ListUsableSubnetworksRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_ListUsableSubnetworks_Call) Return(_a0 *container.ListUsableSubnetworksResponse, _a1 error) *ClusterManagerServer_ListUsableSubnetworks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RollbackNodePoolUpgrade provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) RollbackNodePoolUpgrade(_a0 context.Context, _a1 *container.RollbackNodePoolUpgradeRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.RollbackNodePoolUpgradeRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.RollbackNodePoolUpgradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_RollbackNodePoolUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackNodePoolUpgrade'
type ClusterManagerServer_RollbackNodePoolUpgrade_Call struct {
	*mock.Call
}

// RollbackNodePoolUpgrade is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.RollbackNodePoolUpgradeRequest
func (_e *ClusterManagerServer_Expecter) RollbackNodePoolUpgrade(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_RollbackNodePoolUpgrade_Call {
	return &ClusterManagerServer_RollbackNodePoolUpgrade_Call{Call: _e.mock.On("RollbackNodePoolUpgrade", _a0, _a1)}
}

func (_c *ClusterManagerServer_RollbackNodePoolUpgrade_Call) Run(run func(_a0 context.Context, _a1 *container.RollbackNodePoolUpgradeRequest)) *ClusterManagerServer_RollbackNodePoolUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.RollbackNodePoolUpgradeRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_RollbackNodePoolUpgrade_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_RollbackNodePoolUpgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetAddonsConfig provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetAddonsConfig(_a0 context.Context, _a1 *container.SetAddonsConfigRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetAddonsConfigRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetAddonsConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetAddonsConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAddonsConfig'
type ClusterManagerServer_SetAddonsConfig_Call struct {
	*mock.Call
}

// SetAddonsConfig is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetAddonsConfigRequest
func (_e *ClusterManagerServer_Expecter) SetAddonsConfig(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetAddonsConfig_Call {
	return &ClusterManagerServer_SetAddonsConfig_Call{Call: _e.mock.On("SetAddonsConfig", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetAddonsConfig_Call) Run(run func(_a0 context.Context, _a1 *container.SetAddonsConfigRequest)) *ClusterManagerServer_SetAddonsConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetAddonsConfigRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetAddonsConfig_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetAddonsConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetLabels provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLabels(_a0 context.Context, _a1 *container.SetLabelsRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLabelsRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLabels'
type ClusterManagerServer_SetLabels_Call struct {
	*mock.Call
}

// SetLabels is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetLabelsRequest
func (_e *ClusterManagerServer_Expecter) SetLabels(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetLabels_Call {
	return &ClusterManagerServer_SetLabels_Call{Call: _e.mock.On("SetLabels", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetLabels_Call) Run(run func(_a0 context.Context, _a1 *container.SetLabelsRequest)) *ClusterManagerServer_SetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetLabelsRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetLabels_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetLegacyAbac provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLegacyAbac(_a0 context.Context, _a1 *container.SetLegacyAbacRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLegacyAbacRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLegacyAbacRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetLegacyAbac_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLegacyAbac'
type ClusterManagerServer_SetLegacyAbac_Call struct {
	*mock.Call
}

// SetLegacyAbac is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetLegacyAbacRequest
func (_e *ClusterManagerServer_Expecter) SetLegacyAbac(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetLegacyAbac_Call {
	return &ClusterManagerServer_SetLegacyAbac_Call{Call: _e.mock.On("SetLegacyAbac", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetLegacyAbac_Call) Run(run func(_a0 context.Context, _a1 *container.SetLegacyAbacRequest)) *ClusterManagerServer_SetLegacyAbac_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetLegacyAbacRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetLegacyAbac_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetLegacyAbac_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetLocations provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLocations(_a0 context.Context, _a1 *container.SetLocationsRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLocationsRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLocationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLocations'
type ClusterManagerServer_SetLocations_Call struct {
	*mock.Call
}

// SetLocations is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetLocationsRequest
func (_e *ClusterManagerServer_Expecter) SetLocations(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetLocations_Call {
	return &ClusterManagerServer_SetLocations_Call{Call: _e.mock.On("SetLocations", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetLocations_Call) Run(run func(_a0 context.Context, _a1 *container.SetLocationsRequest)) *ClusterManagerServer_SetLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetLocationsRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetLocations_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetLocations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetLoggingService provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLoggingService(_a0 context.Context, _a1 *container.SetLoggingServiceRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLoggingServiceRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLoggingServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetLoggingService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLoggingService'
type ClusterManagerServer_SetLoggingService_Call struct {
	*mock.Call
}

// SetLoggingService is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetLoggingServiceRequest
func (_e *ClusterManagerServer_Expecter) SetLoggingService(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetLoggingService_Call {
	return &ClusterManagerServer_SetLoggingService_Call{Call: _e.mock.On("SetLoggingService", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetLoggingService_Call) Run(run func(_a0 context.Context, _a1 *container.SetLoggingServiceRequest)) *ClusterManagerServer_SetLoggingService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetLoggingServiceRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetLoggingService_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetLoggingService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetMaintenancePolicy provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMaintenancePolicy(_a0 context.Context, _a1 *container.SetMaintenancePolicyRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMaintenancePolicyRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMaintenancePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetMaintenancePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaintenancePolicy'
type ClusterManagerServer_SetMaintenancePolicy_Call struct {
	*mock.Call
}

// SetMaintenancePolicy is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetMaintenancePolicyRequest
func (_e *ClusterManagerServer_Expecter) SetMaintenancePolicy(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetMaintenancePolicy_Call {
	return &ClusterManagerServer_SetMaintenancePolicy_Call{Call: _e.mock.On("SetMaintenancePolicy", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetMaintenancePolicy_Call) Run(run func(_a0 context.Context, _a1 *container.SetMaintenancePolicyRequest)) *ClusterManagerServer_SetMaintenancePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetMaintenancePolicyRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetMaintenancePolicy_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetMaintenancePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetMasterAuth provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMasterAuth(_a0 context.Context, _a1 *container.SetMasterAuthRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMasterAuthRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMasterAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetMasterAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMasterAuth'
type ClusterManagerServer_SetMasterAuth_Call struct {
	*mock.Call
}

// SetMasterAuth is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetMasterAuthRequest
func (_e *ClusterManagerServer_Expecter) SetMasterAuth(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetMasterAuth_Call {
	return &ClusterManagerServer_SetMasterAuth_Call{Call: _e.mock.On("SetMasterAuth", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetMasterAuth_Call) Run(run func(_a0 context.Context, _a1 *container.SetMasterAuthRequest)) *ClusterManagerServer_SetMasterAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetMasterAuthRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetMasterAuth_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetMasterAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetMonitoringService provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMonitoringService(_a0 context.Context, _a1 *container.SetMonitoringServiceRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMonitoringServiceRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMonitoringServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetMonitoringService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMonitoringService'
type ClusterManagerServer_SetMonitoringService_Call struct {
	*mock.Call
}

// SetMonitoringService is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetMonitoringServiceRequest
func (_e *ClusterManagerServer_Expecter) SetMonitoringService(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetMonitoringService_Call {
	return &ClusterManagerServer_SetMonitoringService_Call{Call: _e.mock.On("SetMonitoringService", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetMonitoringService_Call) Run(run func(_a0 context.Context, _a1 *container.SetMonitoringServiceRequest)) *ClusterManagerServer_SetMonitoringService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetMonitoringServiceRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetMonitoringService_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetMonitoringService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetNetworkPolicy provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNetworkPolicy(_a0 context.Context, _a1 *container.SetNetworkPolicyRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNetworkPolicyRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNetworkPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetNetworkPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkPolicy'
type ClusterManagerServer_SetNetworkPolicy_Call struct {
	*mock.Call
}

// SetNetworkPolicy is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetNetworkPolicyRequest
func (_e *ClusterManagerServer_Expecter) SetNetworkPolicy(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetNetworkPolicy_Call {
	return &ClusterManagerServer_SetNetworkPolicy_Call{Call: _e.mock.On("SetNetworkPolicy", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetNetworkPolicy_Call) Run(run func(_a0 context.Context, _a1 *container.SetNetworkPolicyRequest)) *ClusterManagerServer_SetNetworkPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetNetworkPolicyRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetNetworkPolicy_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetNetworkPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetNodePoolAutoscaling provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolAutoscaling(_a0 context.Context, _a1 *container.SetNodePoolAutoscalingRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolAutoscalingRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolAutoscalingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetNodePoolAutoscaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNodePoolAutoscaling'
type ClusterManagerServer_SetNodePoolAutoscaling_Call struct {
	*mock.Call
}

// SetNodePoolAutoscaling is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetNodePoolAutoscalingRequest
func (_e *ClusterManagerServer_Expecter) SetNodePoolAutoscaling(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetNodePoolAutoscaling_Call {
	return &ClusterManagerServer_SetNodePoolAutoscaling_Call{Call: _e.mock.On("SetNodePoolAutoscaling", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetNodePoolAutoscaling_Call) Run(run func(_a0 context.Context, _a1 *container.SetNodePoolAutoscalingRequest)) *ClusterManagerServer_SetNodePoolAutoscaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetNodePoolAutoscalingRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetNodePoolAutoscaling_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetNodePoolAutoscaling_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetNodePoolManagement provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolManagement(_a0 context.Context, _a1 *container.SetNodePoolManagementRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolManagementRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolManagementRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetNodePoolManagement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNodePoolManagement'
type ClusterManagerServer_SetNodePoolManagement_Call struct {
	*mock.Call
}

// SetNodePoolManagement is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetNodePoolManagementRequest
func (_e *ClusterManagerServer_Expecter) SetNodePoolManagement(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetNodePoolManagement_Call {
	return &ClusterManagerServer_SetNodePoolManagement_Call{Call: _e.mock.On("SetNodePoolManagement", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetNodePoolManagement_Call) Run(run func(_a0 context.Context, _a1 *container.SetNodePoolManagementRequest)) *ClusterManagerServer_SetNodePoolManagement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetNodePoolManagementRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetNodePoolManagement_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetNodePoolManagement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetNodePoolSize provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolSize(_a0 context.Context, _a1 *container.SetNodePoolSizeRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolSizeRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolSizeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_SetNodePoolSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNodePoolSize'
type ClusterManagerServer_SetNodePoolSize_Call struct {
	*mock.Call
}

// SetNodePoolSize is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.SetNodePoolSizeRequest
func (_e *ClusterManagerServer_Expecter) SetNodePoolSize(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_SetNodePoolSize_Call {
	return &ClusterManagerServer_SetNodePoolSize_Call{Call: _e.mock.On("SetNodePoolSize", _a0, _a1)}
}

func (_c *ClusterManagerServer_SetNodePoolSize_Call) Run(run func(_a0 context.Context, _a1 *container.SetNodePoolSizeRequest)) *ClusterManagerServer_SetNodePoolSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.SetNodePoolSizeRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_SetNodePoolSize_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_SetNodePoolSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StartIPRotation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) StartIPRotation(_a0 context.Context, _a1 *container.StartIPRotationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.StartIPRotationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.StartIPRotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_StartIPRotation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartIPRotation'
type ClusterManagerServer_StartIPRotation_Call struct {
	*mock.Call
}

// StartIPRotation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.StartIPRotationRequest
func (_e *ClusterManagerServer_Expecter) StartIPRotation(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_StartIPRotation_Call {
	return &ClusterManagerServer_StartIPRotation_Call{Call: _e.mock.On("StartIPRotation", _a0, _a1)}
}

func (_c *ClusterManagerServer_StartIPRotation_Call) Run(run func(_a0 context.Context, _a1 *container.StartIPRotationRequest)) *ClusterManagerServer_StartIPRotation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.StartIPRotationRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_StartIPRotation_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_StartIPRotation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateCluster(_a0 context.Context, _a1 *container.UpdateClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type ClusterManagerServer_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.UpdateClusterRequest
func (_e *ClusterManagerServer_Expecter) UpdateCluster(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_UpdateCluster_Call {
	return &ClusterManagerServer_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", _a0, _a1)}
}

func (_c *ClusterManagerServer_UpdateCluster_Call) Run(run func(_a0 context.Context, _a1 *container.UpdateClusterRequest)) *ClusterManagerServer_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.UpdateClusterRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_UpdateCluster_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_UpdateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateMaster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateMaster(_a0 context.Context, _a1 *container.UpdateMasterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateMasterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateMasterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_UpdateMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMaster'
type ClusterManagerServer_UpdateMaster_Call struct {
	*mock.Call
}

// UpdateMaster is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.UpdateMasterRequest
func (_e *ClusterManagerServer_Expecter) UpdateMaster(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_UpdateMaster_Call {
	return &ClusterManagerServer_UpdateMaster_Call{Call: _e.mock.On("UpdateMaster", _a0, _a1)}
}

func (_c *ClusterManagerServer_UpdateMaster_Call) Run(run func(_a0 context.Context, _a1 *container.UpdateMasterRequest)) *ClusterManagerServer_UpdateMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.UpdateMasterRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_UpdateMaster_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_UpdateMaster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateNodePool(_a0 context.Context, _a1 *container.UpdateNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterManagerServer_UpdateNodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNodePool'
type ClusterManagerServer_UpdateNodePool_Call struct {
	*mock.Call
}

// UpdateNodePool is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *container.UpdateNodePoolRequest
func (_e *ClusterManagerServer_Expecter) UpdateNodePool(_a0 interface{}, _a1 interface{}) *ClusterManagerServer_UpdateNodePool_Call {
	return &ClusterManagerServer_UpdateNodePool_Call{Call: _e.mock.On("UpdateNodePool", _a0, _a1)}
}

func (_c *ClusterManagerServer_UpdateNodePool_Call) Run(run func(_a0 context.Context, _a1 *container.UpdateNodePoolRequest)) *ClusterManagerServer_UpdateNodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.UpdateNodePoolRequest))
	})
	return _c
}

func (_c *ClusterManagerServer_UpdateNodePool_Call) Return(_a0 *container.Operation, _a1 error) *ClusterManagerServer_UpdateNodePool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewClusterManagerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterManagerServer creates a new instance of ClusterManagerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterManagerServer(t mockConstructorTestingTNewClusterManagerServer) *ClusterManagerServer {
	mock := &ClusterManagerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

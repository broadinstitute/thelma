// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	container "google.golang.org/genproto/googleapis/container/v1"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// ClusterManagerServer is an autogenerated mock type for the ClusterManagerServer type
type ClusterManagerServer struct {
	mock.Mock
}

// CancelOperation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CancelOperation(_a0 context.Context, _a1 *container.CancelOperationRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *container.CancelOperationRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CancelOperationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteIPRotation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CompleteIPRotation(_a0 context.Context, _a1 *container.CompleteIPRotationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CompleteIPRotationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CompleteIPRotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteNodePoolUpgrade provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CompleteNodePoolUpgrade(_a0 context.Context, _a1 *container.CompleteNodePoolUpgradeRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *container.CompleteNodePoolUpgradeRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CompleteNodePoolUpgradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CreateCluster(_a0 context.Context, _a1 *container.CreateClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CreateClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CreateClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) CreateNodePool(_a0 context.Context, _a1 *container.CreateNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.CreateNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.CreateNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) DeleteCluster(_a0 context.Context, _a1 *container.DeleteClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.DeleteClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.DeleteClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) DeleteNodePool(_a0 context.Context, _a1 *container.DeleteNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.DeleteNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.DeleteNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetCluster(_a0 context.Context, _a1 *container.GetClusterRequest) (*container.Cluster, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Cluster
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetClusterRequest) *container.Cluster); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJSONWebKeys provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetJSONWebKeys(_a0 context.Context, _a1 *container.GetJSONWebKeysRequest) (*container.GetJSONWebKeysResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.GetJSONWebKeysResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetJSONWebKeysRequest) *container.GetJSONWebKeysResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.GetJSONWebKeysResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetJSONWebKeysRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetNodePool(_a0 context.Context, _a1 *container.GetNodePoolRequest) (*container.NodePool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.NodePool
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetNodePoolRequest) *container.NodePool); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetOperation(_a0 context.Context, _a1 *container.GetOperationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetOperationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetOperationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerConfig provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) GetServerConfig(_a0 context.Context, _a1 *container.GetServerConfigRequest) (*container.ServerConfig, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ServerConfig
	if rf, ok := ret.Get(0).(func(context.Context, *container.GetServerConfigRequest) *container.ServerConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ServerConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.GetServerConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListClusters(_a0 context.Context, _a1 *container.ListClustersRequest) (*container.ListClustersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListClustersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListClustersRequest) *container.ListClustersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListClustersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListClustersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodePools provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListNodePools(_a0 context.Context, _a1 *container.ListNodePoolsRequest) (*container.ListNodePoolsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListNodePoolsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListNodePoolsRequest) *container.ListNodePoolsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListNodePoolsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListNodePoolsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListOperations(_a0 context.Context, _a1 *container.ListOperationsRequest) (*container.ListOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListOperationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListOperationsRequest) *container.ListOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListOperationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsableSubnetworks provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) ListUsableSubnetworks(_a0 context.Context, _a1 *container.ListUsableSubnetworksRequest) (*container.ListUsableSubnetworksResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.ListUsableSubnetworksResponse
	if rf, ok := ret.Get(0).(func(context.Context, *container.ListUsableSubnetworksRequest) *container.ListUsableSubnetworksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.ListUsableSubnetworksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.ListUsableSubnetworksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackNodePoolUpgrade provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) RollbackNodePoolUpgrade(_a0 context.Context, _a1 *container.RollbackNodePoolUpgradeRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.RollbackNodePoolUpgradeRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.RollbackNodePoolUpgradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAddonsConfig provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetAddonsConfig(_a0 context.Context, _a1 *container.SetAddonsConfigRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetAddonsConfigRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetAddonsConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLabels provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLabels(_a0 context.Context, _a1 *container.SetLabelsRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLabelsRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLegacyAbac provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLegacyAbac(_a0 context.Context, _a1 *container.SetLegacyAbacRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLegacyAbacRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLegacyAbacRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLocations provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLocations(_a0 context.Context, _a1 *container.SetLocationsRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLocationsRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLocationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLoggingService provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetLoggingService(_a0 context.Context, _a1 *container.SetLoggingServiceRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetLoggingServiceRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetLoggingServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMaintenancePolicy provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMaintenancePolicy(_a0 context.Context, _a1 *container.SetMaintenancePolicyRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMaintenancePolicyRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMaintenancePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMasterAuth provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMasterAuth(_a0 context.Context, _a1 *container.SetMasterAuthRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMasterAuthRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMasterAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMonitoringService provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetMonitoringService(_a0 context.Context, _a1 *container.SetMonitoringServiceRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetMonitoringServiceRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetMonitoringServiceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNetworkPolicy provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNetworkPolicy(_a0 context.Context, _a1 *container.SetNetworkPolicyRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNetworkPolicyRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNetworkPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodePoolAutoscaling provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolAutoscaling(_a0 context.Context, _a1 *container.SetNodePoolAutoscalingRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolAutoscalingRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolAutoscalingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodePoolManagement provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolManagement(_a0 context.Context, _a1 *container.SetNodePoolManagementRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolManagementRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolManagementRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNodePoolSize provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) SetNodePoolSize(_a0 context.Context, _a1 *container.SetNodePoolSizeRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.SetNodePoolSizeRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.SetNodePoolSizeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartIPRotation provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) StartIPRotation(_a0 context.Context, _a1 *container.StartIPRotationRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.StartIPRotationRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.StartIPRotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateCluster(_a0 context.Context, _a1 *container.UpdateClusterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateClusterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMaster provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateMaster(_a0 context.Context, _a1 *container.UpdateMasterRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateMasterRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateMasterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodePool provides a mock function with given fields: _a0, _a1
func (_m *ClusterManagerServer) UpdateNodePool(_a0 context.Context, _a1 *container.UpdateNodePoolRequest) (*container.Operation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *container.Operation
	if rf, ok := ret.Get(0).(func(context.Context, *container.UpdateNodePoolRequest) *container.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *container.UpdateNodePoolRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClusterManagerServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusterManagerServer creates a new instance of ClusterManagerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusterManagerServer(t mockConstructorTestingTNewClusterManagerServer) *ClusterManagerServer {
	mock := &ClusterManagerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pubsub "google.golang.org/genproto/googleapis/pubsub/v1"
)

// SubscriberServer is an autogenerated mock type for the SubscriberServer type
type SubscriberServer struct {
	mock.Mock
}

// Acknowledge provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Acknowledge(_a0 context.Context, _a1 *pubsub.AcknowledgeRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.AcknowledgeRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.AcknowledgeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) CreateSnapshot(_a0 context.Context, _a1 *pubsub.CreateSnapshotRequest) (*pubsub.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.CreateSnapshotRequest) *pubsub.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.CreateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) CreateSubscription(_a0 context.Context, _a1 *pubsub.Subscription) (*pubsub.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.Subscription) *pubsub.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.Subscription) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) DeleteSnapshot(_a0 context.Context, _a1 *pubsub.DeleteSnapshotRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DeleteSnapshotRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DeleteSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) DeleteSubscription(_a0 context.Context, _a1 *pubsub.DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DeleteSubscriptionRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DeleteSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) GetSnapshot(_a0 context.Context, _a1 *pubsub.GetSnapshotRequest) (*pubsub.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.GetSnapshotRequest) *pubsub.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.GetSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) GetSubscription(_a0 context.Context, _a1 *pubsub.GetSubscriptionRequest) (*pubsub.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.GetSubscriptionRequest) *pubsub.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.GetSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ListSnapshots(_a0 context.Context, _a1 *pubsub.ListSnapshotsRequest) (*pubsub.ListSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListSnapshotsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListSnapshotsRequest) *pubsub.ListSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListSnapshotsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ListSubscriptions(_a0 context.Context, _a1 *pubsub.ListSubscriptionsRequest) (*pubsub.ListSubscriptionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListSubscriptionsRequest) *pubsub.ListSubscriptionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListSubscriptionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAckDeadline provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ModifyAckDeadline(_a0 context.Context, _a1 *pubsub.ModifyAckDeadlineRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ModifyAckDeadlineRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ModifyAckDeadlineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyPushConfig provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ModifyPushConfig(_a0 context.Context, _a1 *pubsub.ModifyPushConfigRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ModifyPushConfigRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ModifyPushConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pull provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Pull(_a0 context.Context, _a1 *pubsub.PullRequest) (*pubsub.PullResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.PullResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.PullRequest) *pubsub.PullResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.PullResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.PullRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Seek provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Seek(_a0 context.Context, _a1 *pubsub.SeekRequest) (*pubsub.SeekResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.SeekResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.SeekRequest) *pubsub.SeekResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.SeekResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.SeekRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamingPull provides a mock function with given fields: _a0
func (_m *SubscriberServer) StreamingPull(_a0 pubsub.Subscriber_StreamingPullServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pubsub.Subscriber_StreamingPullServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) UpdateSnapshot(_a0 context.Context, _a1 *pubsub.UpdateSnapshotRequest) (*pubsub.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.UpdateSnapshotRequest) *pubsub.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.UpdateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) UpdateSubscription(_a0 context.Context, _a1 *pubsub.UpdateSubscriptionRequest) (*pubsub.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.UpdateSubscriptionRequest) *pubsub.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.UpdateSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSubscriberServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriberServer creates a new instance of SubscriberServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriberServer(t mockConstructorTestingTNewSubscriberServer) *SubscriberServer {
	mock := &SubscriberServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pubsubpb "cloud.google.com/go/pubsub/apiv1/pubsubpb"
)

// SubscriberServer is an autogenerated mock type for the SubscriberServer type
type SubscriberServer struct {
	mock.Mock
}

type SubscriberServer_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriberServer) EXPECT() *SubscriberServer_Expecter {
	return &SubscriberServer_Expecter{mock: &_m.Mock}
}

// Acknowledge provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Acknowledge(_a0 context.Context, _a1 *pubsubpb.AcknowledgeRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.AcknowledgeRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.AcknowledgeRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.AcknowledgeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_Acknowledge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acknowledge'
type SubscriberServer_Acknowledge_Call struct {
	*mock.Call
}

// Acknowledge is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.AcknowledgeRequest
func (_e *SubscriberServer_Expecter) Acknowledge(_a0 interface{}, _a1 interface{}) *SubscriberServer_Acknowledge_Call {
	return &SubscriberServer_Acknowledge_Call{Call: _e.mock.On("Acknowledge", _a0, _a1)}
}

func (_c *SubscriberServer_Acknowledge_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.AcknowledgeRequest)) *SubscriberServer_Acknowledge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.AcknowledgeRequest))
	})
	return _c
}

func (_c *SubscriberServer_Acknowledge_Call) Return(_a0 *emptypb.Empty, _a1 error) *SubscriberServer_Acknowledge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_Acknowledge_Call) RunAndReturn(run func(context.Context, *pubsubpb.AcknowledgeRequest) (*emptypb.Empty, error)) *SubscriberServer_Acknowledge_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) CreateSnapshot(_a0 context.Context, _a1 *pubsubpb.CreateSnapshotRequest) (*pubsubpb.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.CreateSnapshotRequest) (*pubsubpb.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.CreateSnapshotRequest) *pubsubpb.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.CreateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_CreateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnapshot'
type SubscriberServer_CreateSnapshot_Call struct {
	*mock.Call
}

// CreateSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.CreateSnapshotRequest
func (_e *SubscriberServer_Expecter) CreateSnapshot(_a0 interface{}, _a1 interface{}) *SubscriberServer_CreateSnapshot_Call {
	return &SubscriberServer_CreateSnapshot_Call{Call: _e.mock.On("CreateSnapshot", _a0, _a1)}
}

func (_c *SubscriberServer_CreateSnapshot_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.CreateSnapshotRequest)) *SubscriberServer_CreateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.CreateSnapshotRequest))
	})
	return _c
}

func (_c *SubscriberServer_CreateSnapshot_Call) Return(_a0 *pubsubpb.Snapshot, _a1 error) *SubscriberServer_CreateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_CreateSnapshot_Call) RunAndReturn(run func(context.Context, *pubsubpb.CreateSnapshotRequest) (*pubsubpb.Snapshot, error)) *SubscriberServer_CreateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) CreateSubscription(_a0 context.Context, _a1 *pubsubpb.Subscription) (*pubsubpb.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.Subscription) (*pubsubpb.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.Subscription) *pubsubpb.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.Subscription) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type SubscriberServer_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.Subscription
func (_e *SubscriberServer_Expecter) CreateSubscription(_a0 interface{}, _a1 interface{}) *SubscriberServer_CreateSubscription_Call {
	return &SubscriberServer_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", _a0, _a1)}
}

func (_c *SubscriberServer_CreateSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.Subscription)) *SubscriberServer_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.Subscription))
	})
	return _c
}

func (_c *SubscriberServer_CreateSubscription_Call) Return(_a0 *pubsubpb.Subscription, _a1 error) *SubscriberServer_CreateSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_CreateSubscription_Call) RunAndReturn(run func(context.Context, *pubsubpb.Subscription) (*pubsubpb.Subscription, error)) *SubscriberServer_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) DeleteSnapshot(_a0 context.Context, _a1 *pubsubpb.DeleteSnapshotRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteSnapshotRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteSnapshotRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.DeleteSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_DeleteSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnapshot'
type SubscriberServer_DeleteSnapshot_Call struct {
	*mock.Call
}

// DeleteSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.DeleteSnapshotRequest
func (_e *SubscriberServer_Expecter) DeleteSnapshot(_a0 interface{}, _a1 interface{}) *SubscriberServer_DeleteSnapshot_Call {
	return &SubscriberServer_DeleteSnapshot_Call{Call: _e.mock.On("DeleteSnapshot", _a0, _a1)}
}

func (_c *SubscriberServer_DeleteSnapshot_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.DeleteSnapshotRequest)) *SubscriberServer_DeleteSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.DeleteSnapshotRequest))
	})
	return _c
}

func (_c *SubscriberServer_DeleteSnapshot_Call) Return(_a0 *emptypb.Empty, _a1 error) *SubscriberServer_DeleteSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_DeleteSnapshot_Call) RunAndReturn(run func(context.Context, *pubsubpb.DeleteSnapshotRequest) (*emptypb.Empty, error)) *SubscriberServer_DeleteSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) DeleteSubscription(_a0 context.Context, _a1 *pubsubpb.DeleteSubscriptionRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteSubscriptionRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteSubscriptionRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.DeleteSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriberServer_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.DeleteSubscriptionRequest
func (_e *SubscriberServer_Expecter) DeleteSubscription(_a0 interface{}, _a1 interface{}) *SubscriberServer_DeleteSubscription_Call {
	return &SubscriberServer_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", _a0, _a1)}
}

func (_c *SubscriberServer_DeleteSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.DeleteSubscriptionRequest)) *SubscriberServer_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.DeleteSubscriptionRequest))
	})
	return _c
}

func (_c *SubscriberServer_DeleteSubscription_Call) Return(_a0 *emptypb.Empty, _a1 error) *SubscriberServer_DeleteSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_DeleteSubscription_Call) RunAndReturn(run func(context.Context, *pubsubpb.DeleteSubscriptionRequest) (*emptypb.Empty, error)) *SubscriberServer_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) GetSnapshot(_a0 context.Context, _a1 *pubsubpb.GetSnapshotRequest) (*pubsubpb.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetSnapshotRequest) (*pubsubpb.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetSnapshotRequest) *pubsubpb.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.GetSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_GetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshot'
type SubscriberServer_GetSnapshot_Call struct {
	*mock.Call
}

// GetSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.GetSnapshotRequest
func (_e *SubscriberServer_Expecter) GetSnapshot(_a0 interface{}, _a1 interface{}) *SubscriberServer_GetSnapshot_Call {
	return &SubscriberServer_GetSnapshot_Call{Call: _e.mock.On("GetSnapshot", _a0, _a1)}
}

func (_c *SubscriberServer_GetSnapshot_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.GetSnapshotRequest)) *SubscriberServer_GetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.GetSnapshotRequest))
	})
	return _c
}

func (_c *SubscriberServer_GetSnapshot_Call) Return(_a0 *pubsubpb.Snapshot, _a1 error) *SubscriberServer_GetSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_GetSnapshot_Call) RunAndReturn(run func(context.Context, *pubsubpb.GetSnapshotRequest) (*pubsubpb.Snapshot, error)) *SubscriberServer_GetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) GetSubscription(_a0 context.Context, _a1 *pubsubpb.GetSubscriptionRequest) (*pubsubpb.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetSubscriptionRequest) (*pubsubpb.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetSubscriptionRequest) *pubsubpb.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.GetSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type SubscriberServer_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.GetSubscriptionRequest
func (_e *SubscriberServer_Expecter) GetSubscription(_a0 interface{}, _a1 interface{}) *SubscriberServer_GetSubscription_Call {
	return &SubscriberServer_GetSubscription_Call{Call: _e.mock.On("GetSubscription", _a0, _a1)}
}

func (_c *SubscriberServer_GetSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.GetSubscriptionRequest)) *SubscriberServer_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.GetSubscriptionRequest))
	})
	return _c
}

func (_c *SubscriberServer_GetSubscription_Call) Return(_a0 *pubsubpb.Subscription, _a1 error) *SubscriberServer_GetSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_GetSubscription_Call) RunAndReturn(run func(context.Context, *pubsubpb.GetSubscriptionRequest) (*pubsubpb.Subscription, error)) *SubscriberServer_GetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ListSnapshots provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ListSnapshots(_a0 context.Context, _a1 *pubsubpb.ListSnapshotsRequest) (*pubsubpb.ListSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListSnapshotsRequest) (*pubsubpb.ListSnapshotsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListSnapshotsRequest) *pubsubpb.ListSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ListSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_ListSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSnapshots'
type SubscriberServer_ListSnapshots_Call struct {
	*mock.Call
}

// ListSnapshots is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ListSnapshotsRequest
func (_e *SubscriberServer_Expecter) ListSnapshots(_a0 interface{}, _a1 interface{}) *SubscriberServer_ListSnapshots_Call {
	return &SubscriberServer_ListSnapshots_Call{Call: _e.mock.On("ListSnapshots", _a0, _a1)}
}

func (_c *SubscriberServer_ListSnapshots_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ListSnapshotsRequest)) *SubscriberServer_ListSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ListSnapshotsRequest))
	})
	return _c
}

func (_c *SubscriberServer_ListSnapshots_Call) Return(_a0 *pubsubpb.ListSnapshotsResponse, _a1 error) *SubscriberServer_ListSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_ListSnapshots_Call) RunAndReturn(run func(context.Context, *pubsubpb.ListSnapshotsRequest) (*pubsubpb.ListSnapshotsResponse, error)) *SubscriberServer_ListSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ListSubscriptions(_a0 context.Context, _a1 *pubsubpb.ListSubscriptionsRequest) (*pubsubpb.ListSubscriptionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.ListSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListSubscriptionsRequest) (*pubsubpb.ListSubscriptionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListSubscriptionsRequest) *pubsubpb.ListSubscriptionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.ListSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ListSubscriptionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_ListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptions'
type SubscriberServer_ListSubscriptions_Call struct {
	*mock.Call
}

// ListSubscriptions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ListSubscriptionsRequest
func (_e *SubscriberServer_Expecter) ListSubscriptions(_a0 interface{}, _a1 interface{}) *SubscriberServer_ListSubscriptions_Call {
	return &SubscriberServer_ListSubscriptions_Call{Call: _e.mock.On("ListSubscriptions", _a0, _a1)}
}

func (_c *SubscriberServer_ListSubscriptions_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ListSubscriptionsRequest)) *SubscriberServer_ListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ListSubscriptionsRequest))
	})
	return _c
}

func (_c *SubscriberServer_ListSubscriptions_Call) Return(_a0 *pubsubpb.ListSubscriptionsResponse, _a1 error) *SubscriberServer_ListSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_ListSubscriptions_Call) RunAndReturn(run func(context.Context, *pubsubpb.ListSubscriptionsRequest) (*pubsubpb.ListSubscriptionsResponse, error)) *SubscriberServer_ListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyAckDeadline provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ModifyAckDeadline(_a0 context.Context, _a1 *pubsubpb.ModifyAckDeadlineRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ModifyAckDeadlineRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ModifyAckDeadlineRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ModifyAckDeadlineRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_ModifyAckDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyAckDeadline'
type SubscriberServer_ModifyAckDeadline_Call struct {
	*mock.Call
}

// ModifyAckDeadline is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ModifyAckDeadlineRequest
func (_e *SubscriberServer_Expecter) ModifyAckDeadline(_a0 interface{}, _a1 interface{}) *SubscriberServer_ModifyAckDeadline_Call {
	return &SubscriberServer_ModifyAckDeadline_Call{Call: _e.mock.On("ModifyAckDeadline", _a0, _a1)}
}

func (_c *SubscriberServer_ModifyAckDeadline_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ModifyAckDeadlineRequest)) *SubscriberServer_ModifyAckDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ModifyAckDeadlineRequest))
	})
	return _c
}

func (_c *SubscriberServer_ModifyAckDeadline_Call) Return(_a0 *emptypb.Empty, _a1 error) *SubscriberServer_ModifyAckDeadline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_ModifyAckDeadline_Call) RunAndReturn(run func(context.Context, *pubsubpb.ModifyAckDeadlineRequest) (*emptypb.Empty, error)) *SubscriberServer_ModifyAckDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyPushConfig provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) ModifyPushConfig(_a0 context.Context, _a1 *pubsubpb.ModifyPushConfigRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ModifyPushConfigRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ModifyPushConfigRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ModifyPushConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_ModifyPushConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyPushConfig'
type SubscriberServer_ModifyPushConfig_Call struct {
	*mock.Call
}

// ModifyPushConfig is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ModifyPushConfigRequest
func (_e *SubscriberServer_Expecter) ModifyPushConfig(_a0 interface{}, _a1 interface{}) *SubscriberServer_ModifyPushConfig_Call {
	return &SubscriberServer_ModifyPushConfig_Call{Call: _e.mock.On("ModifyPushConfig", _a0, _a1)}
}

func (_c *SubscriberServer_ModifyPushConfig_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ModifyPushConfigRequest)) *SubscriberServer_ModifyPushConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ModifyPushConfigRequest))
	})
	return _c
}

func (_c *SubscriberServer_ModifyPushConfig_Call) Return(_a0 *emptypb.Empty, _a1 error) *SubscriberServer_ModifyPushConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_ModifyPushConfig_Call) RunAndReturn(run func(context.Context, *pubsubpb.ModifyPushConfigRequest) (*emptypb.Empty, error)) *SubscriberServer_ModifyPushConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Pull(_a0 context.Context, _a1 *pubsubpb.PullRequest) (*pubsubpb.PullResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.PullResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.PullRequest) (*pubsubpb.PullResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.PullRequest) *pubsubpb.PullResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.PullResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.PullRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type SubscriberServer_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.PullRequest
func (_e *SubscriberServer_Expecter) Pull(_a0 interface{}, _a1 interface{}) *SubscriberServer_Pull_Call {
	return &SubscriberServer_Pull_Call{Call: _e.mock.On("Pull", _a0, _a1)}
}

func (_c *SubscriberServer_Pull_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.PullRequest)) *SubscriberServer_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.PullRequest))
	})
	return _c
}

func (_c *SubscriberServer_Pull_Call) Return(_a0 *pubsubpb.PullResponse, _a1 error) *SubscriberServer_Pull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_Pull_Call) RunAndReturn(run func(context.Context, *pubsubpb.PullRequest) (*pubsubpb.PullResponse, error)) *SubscriberServer_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) Seek(_a0 context.Context, _a1 *pubsubpb.SeekRequest) (*pubsubpb.SeekResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.SeekResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.SeekRequest) (*pubsubpb.SeekResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.SeekRequest) *pubsubpb.SeekResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.SeekResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.SeekRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type SubscriberServer_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.SeekRequest
func (_e *SubscriberServer_Expecter) Seek(_a0 interface{}, _a1 interface{}) *SubscriberServer_Seek_Call {
	return &SubscriberServer_Seek_Call{Call: _e.mock.On("Seek", _a0, _a1)}
}

func (_c *SubscriberServer_Seek_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.SeekRequest)) *SubscriberServer_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.SeekRequest))
	})
	return _c
}

func (_c *SubscriberServer_Seek_Call) Return(_a0 *pubsubpb.SeekResponse, _a1 error) *SubscriberServer_Seek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_Seek_Call) RunAndReturn(run func(context.Context, *pubsubpb.SeekRequest) (*pubsubpb.SeekResponse, error)) *SubscriberServer_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// StreamingPull provides a mock function with given fields: _a0
func (_m *SubscriberServer) StreamingPull(_a0 pubsubpb.Subscriber_StreamingPullServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pubsubpb.Subscriber_StreamingPullServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriberServer_StreamingPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamingPull'
type SubscriberServer_StreamingPull_Call struct {
	*mock.Call
}

// StreamingPull is a helper method to define mock.On call
//   - _a0 pubsubpb.Subscriber_StreamingPullServer
func (_e *SubscriberServer_Expecter) StreamingPull(_a0 interface{}) *SubscriberServer_StreamingPull_Call {
	return &SubscriberServer_StreamingPull_Call{Call: _e.mock.On("StreamingPull", _a0)}
}

func (_c *SubscriberServer_StreamingPull_Call) Run(run func(_a0 pubsubpb.Subscriber_StreamingPullServer)) *SubscriberServer_StreamingPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pubsubpb.Subscriber_StreamingPullServer))
	})
	return _c
}

func (_c *SubscriberServer_StreamingPull_Call) Return(_a0 error) *SubscriberServer_StreamingPull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriberServer_StreamingPull_Call) RunAndReturn(run func(pubsubpb.Subscriber_StreamingPullServer) error) *SubscriberServer_StreamingPull_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) UpdateSnapshot(_a0 context.Context, _a1 *pubsubpb.UpdateSnapshotRequest) (*pubsubpb.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateSnapshotRequest) (*pubsubpb.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateSnapshotRequest) *pubsubpb.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.UpdateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_UpdateSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSnapshot'
type SubscriberServer_UpdateSnapshot_Call struct {
	*mock.Call
}

// UpdateSnapshot is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.UpdateSnapshotRequest
func (_e *SubscriberServer_Expecter) UpdateSnapshot(_a0 interface{}, _a1 interface{}) *SubscriberServer_UpdateSnapshot_Call {
	return &SubscriberServer_UpdateSnapshot_Call{Call: _e.mock.On("UpdateSnapshot", _a0, _a1)}
}

func (_c *SubscriberServer_UpdateSnapshot_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.UpdateSnapshotRequest)) *SubscriberServer_UpdateSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.UpdateSnapshotRequest))
	})
	return _c
}

func (_c *SubscriberServer_UpdateSnapshot_Call) Return(_a0 *pubsubpb.Snapshot, _a1 error) *SubscriberServer_UpdateSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_UpdateSnapshot_Call) RunAndReturn(run func(context.Context, *pubsubpb.UpdateSnapshotRequest) (*pubsubpb.Snapshot, error)) *SubscriberServer_UpdateSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function with given fields: _a0, _a1
func (_m *SubscriberServer) UpdateSubscription(_a0 context.Context, _a1 *pubsubpb.UpdateSubscriptionRequest) (*pubsubpb.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateSubscriptionRequest) (*pubsubpb.Subscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateSubscriptionRequest) *pubsubpb.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.UpdateSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriberServer_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type SubscriberServer_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.UpdateSubscriptionRequest
func (_e *SubscriberServer_Expecter) UpdateSubscription(_a0 interface{}, _a1 interface{}) *SubscriberServer_UpdateSubscription_Call {
	return &SubscriberServer_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", _a0, _a1)}
}

func (_c *SubscriberServer_UpdateSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.UpdateSubscriptionRequest)) *SubscriberServer_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.UpdateSubscriptionRequest))
	})
	return _c
}

func (_c *SubscriberServer_UpdateSubscription_Call) Return(_a0 *pubsubpb.Subscription, _a1 error) *SubscriberServer_UpdateSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriberServer_UpdateSubscription_Call) RunAndReturn(run func(context.Context, *pubsubpb.UpdateSubscriptionRequest) (*pubsubpb.Subscription, error)) *SubscriberServer_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSubscriberServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriberServer creates a new instance of SubscriberServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriberServer(t mockConstructorTestingTNewSubscriberServer) *SubscriberServer {
	mock := &SubscriberServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pubsub "cloud.google.com/go/pubsub/apiv1/pubsubpb"
)

// PublisherServer is an autogenerated mock type for the PublisherServer type
type PublisherServer struct {
	mock.Mock
}

type PublisherServer_Expecter struct {
	mock *mock.Mock
}

func (_m *PublisherServer) EXPECT() *PublisherServer_Expecter {
	return &PublisherServer_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) CreateTopic(_a0 context.Context, _a1 *pubsub.Topic) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.Topic) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.Topic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type PublisherServer_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.Topic
func (_e *PublisherServer_Expecter) CreateTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_CreateTopic_Call {
	return &PublisherServer_CreateTopic_Call{Call: _e.mock.On("CreateTopic", _a0, _a1)}
}

func (_c *PublisherServer_CreateTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsub.Topic)) *PublisherServer_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.Topic))
	})
	return _c
}

func (_c *PublisherServer_CreateTopic_Call) Return(_a0 *pubsub.Topic, _a1 error) *PublisherServer_CreateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DeleteTopic(_a0 context.Context, _a1 *pubsub.DeleteTopicRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DeleteTopicRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DeleteTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type PublisherServer_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.DeleteTopicRequest
func (_e *PublisherServer_Expecter) DeleteTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_DeleteTopic_Call {
	return &PublisherServer_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic", _a0, _a1)}
}

func (_c *PublisherServer_DeleteTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsub.DeleteTopicRequest)) *PublisherServer_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.DeleteTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_DeleteTopic_Call) Return(_a0 *emptypb.Empty, _a1 error) *PublisherServer_DeleteTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DetachSubscription provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DetachSubscription(_a0 context.Context, _a1 *pubsub.DetachSubscriptionRequest) (*pubsub.DetachSubscriptionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.DetachSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DetachSubscriptionRequest) *pubsub.DetachSubscriptionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.DetachSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DetachSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_DetachSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachSubscription'
type PublisherServer_DetachSubscription_Call struct {
	*mock.Call
}

// DetachSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.DetachSubscriptionRequest
func (_e *PublisherServer_Expecter) DetachSubscription(_a0 interface{}, _a1 interface{}) *PublisherServer_DetachSubscription_Call {
	return &PublisherServer_DetachSubscription_Call{Call: _e.mock.On("DetachSubscription", _a0, _a1)}
}

func (_c *PublisherServer_DetachSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsub.DetachSubscriptionRequest)) *PublisherServer_DetachSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.DetachSubscriptionRequest))
	})
	return _c
}

func (_c *PublisherServer_DetachSubscription_Call) Return(_a0 *pubsub.DetachSubscriptionResponse, _a1 error) *PublisherServer_DetachSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) GetTopic(_a0 context.Context, _a1 *pubsub.GetTopicRequest) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.GetTopicRequest) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.GetTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type PublisherServer_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.GetTopicRequest
func (_e *PublisherServer_Expecter) GetTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_GetTopic_Call {
	return &PublisherServer_GetTopic_Call{Call: _e.mock.On("GetTopic", _a0, _a1)}
}

func (_c *PublisherServer_GetTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsub.GetTopicRequest)) *PublisherServer_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.GetTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_GetTopic_Call) Return(_a0 *pubsub.Topic, _a1 error) *PublisherServer_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTopicSnapshots provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSnapshots(_a0 context.Context, _a1 *pubsub.ListTopicSnapshotsRequest) (*pubsub.ListTopicSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicSnapshotsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicSnapshotsRequest) *pubsub.ListTopicSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicSnapshotsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopicSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopicSnapshots'
type PublisherServer_ListTopicSnapshots_Call struct {
	*mock.Call
}

// ListTopicSnapshots is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.ListTopicSnapshotsRequest
func (_e *PublisherServer_Expecter) ListTopicSnapshots(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopicSnapshots_Call {
	return &PublisherServer_ListTopicSnapshots_Call{Call: _e.mock.On("ListTopicSnapshots", _a0, _a1)}
}

func (_c *PublisherServer_ListTopicSnapshots_Call) Run(run func(_a0 context.Context, _a1 *pubsub.ListTopicSnapshotsRequest)) *PublisherServer_ListTopicSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.ListTopicSnapshotsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopicSnapshots_Call) Return(_a0 *pubsub.ListTopicSnapshotsResponse, _a1 error) *PublisherServer_ListTopicSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTopicSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSubscriptions(_a0 context.Context, _a1 *pubsub.ListTopicSubscriptionsRequest) (*pubsub.ListTopicSubscriptionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicSubscriptionsRequest) *pubsub.ListTopicSubscriptionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicSubscriptionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopicSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopicSubscriptions'
type PublisherServer_ListTopicSubscriptions_Call struct {
	*mock.Call
}

// ListTopicSubscriptions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.ListTopicSubscriptionsRequest
func (_e *PublisherServer_Expecter) ListTopicSubscriptions(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopicSubscriptions_Call {
	return &PublisherServer_ListTopicSubscriptions_Call{Call: _e.mock.On("ListTopicSubscriptions", _a0, _a1)}
}

func (_c *PublisherServer_ListTopicSubscriptions_Call) Run(run func(_a0 context.Context, _a1 *pubsub.ListTopicSubscriptionsRequest)) *PublisherServer_ListTopicSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.ListTopicSubscriptionsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopicSubscriptions_Call) Return(_a0 *pubsub.ListTopicSubscriptionsResponse, _a1 error) *PublisherServer_ListTopicSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTopics provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopics(_a0 context.Context, _a1 *pubsub.ListTopicsRequest) (*pubsub.ListTopicsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicsRequest) *pubsub.ListTopicsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type PublisherServer_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.ListTopicsRequest
func (_e *PublisherServer_Expecter) ListTopics(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopics_Call {
	return &PublisherServer_ListTopics_Call{Call: _e.mock.On("ListTopics", _a0, _a1)}
}

func (_c *PublisherServer_ListTopics_Call) Run(run func(_a0 context.Context, _a1 *pubsub.ListTopicsRequest)) *PublisherServer_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.ListTopicsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopics_Call) Return(_a0 *pubsub.ListTopicsResponse, _a1 error) *PublisherServer_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) Publish(_a0 context.Context, _a1 *pubsub.PublishRequest) (*pubsub.PublishResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.PublishResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.PublishRequest) *pubsub.PublishResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.PublishResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.PublishRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PublisherServer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.PublishRequest
func (_e *PublisherServer_Expecter) Publish(_a0 interface{}, _a1 interface{}) *PublisherServer_Publish_Call {
	return &PublisherServer_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *PublisherServer_Publish_Call) Run(run func(_a0 context.Context, _a1 *pubsub.PublishRequest)) *PublisherServer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.PublishRequest))
	})
	return _c
}

func (_c *PublisherServer_Publish_Call) Return(_a0 *pubsub.PublishResponse, _a1 error) *PublisherServer_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) UpdateTopic(_a0 context.Context, _a1 *pubsub.UpdateTopicRequest) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.UpdateTopicRequest) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.UpdateTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_UpdateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTopic'
type PublisherServer_UpdateTopic_Call struct {
	*mock.Call
}

// UpdateTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsub.UpdateTopicRequest
func (_e *PublisherServer_Expecter) UpdateTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_UpdateTopic_Call {
	return &PublisherServer_UpdateTopic_Call{Call: _e.mock.On("UpdateTopic", _a0, _a1)}
}

func (_c *PublisherServer_UpdateTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsub.UpdateTopicRequest)) *PublisherServer_UpdateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsub.UpdateTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_UpdateTopic_Call) Return(_a0 *pubsub.Topic, _a1 error) *PublisherServer_UpdateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPublisherServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisherServer creates a new instance of PublisherServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisherServer(t mockConstructorTestingTNewPublisherServer) *PublisherServer {
	mock := &PublisherServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pubsub "google.golang.org/genproto/googleapis/pubsub/v1"
)

// PublisherServer is an autogenerated mock type for the PublisherServer type
type PublisherServer struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) CreateTopic(_a0 context.Context, _a1 *pubsub.Topic) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.Topic) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.Topic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DeleteTopic(_a0 context.Context, _a1 *pubsub.DeleteTopicRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DeleteTopicRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DeleteTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachSubscription provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DetachSubscription(_a0 context.Context, _a1 *pubsub.DetachSubscriptionRequest) (*pubsub.DetachSubscriptionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.DetachSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.DetachSubscriptionRequest) *pubsub.DetachSubscriptionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.DetachSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.DetachSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) GetTopic(_a0 context.Context, _a1 *pubsub.GetTopicRequest) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.GetTopicRequest) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.GetTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicSnapshots provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSnapshots(_a0 context.Context, _a1 *pubsub.ListTopicSnapshotsRequest) (*pubsub.ListTopicSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicSnapshotsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicSnapshotsRequest) *pubsub.ListTopicSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicSnapshotsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSubscriptions(_a0 context.Context, _a1 *pubsub.ListTopicSubscriptionsRequest) (*pubsub.ListTopicSubscriptionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicSubscriptionsRequest) *pubsub.ListTopicSubscriptionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicSubscriptionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopics provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopics(_a0 context.Context, _a1 *pubsub.ListTopicsRequest) (*pubsub.ListTopicsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.ListTopicsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.ListTopicsRequest) *pubsub.ListTopicsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.ListTopicsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.ListTopicsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) Publish(_a0 context.Context, _a1 *pubsub.PublishRequest) (*pubsub.PublishResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.PublishResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.PublishRequest) *pubsub.PublishResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.PublishResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.PublishRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) UpdateTopic(_a0 context.Context, _a1 *pubsub.UpdateTopicRequest) (*pubsub.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsub.Topic
	if rf, ok := ret.Get(0).(func(context.Context, *pubsub.UpdateTopicRequest) *pubsub.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsub.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pubsub.UpdateTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPublisherServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisherServer creates a new instance of PublisherServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisherServer(t mockConstructorTestingTNewPublisherServer) *PublisherServer {
	mock := &PublisherServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

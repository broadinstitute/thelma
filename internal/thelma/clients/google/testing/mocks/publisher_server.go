// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pubsubpb "cloud.google.com/go/pubsub/apiv1/pubsubpb"
)

// PublisherServer is an autogenerated mock type for the PublisherServer type
type PublisherServer struct {
	mock.Mock
}

type PublisherServer_Expecter struct {
	mock *mock.Mock
}

func (_m *PublisherServer) EXPECT() *PublisherServer_Expecter {
	return &PublisherServer_Expecter{mock: &_m.Mock}
}

// CreateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) CreateTopic(_a0 context.Context, _a1 *pubsubpb.Topic) (*pubsubpb.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.Topic) (*pubsubpb.Topic, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.Topic) *pubsubpb.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.Topic) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type PublisherServer_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.Topic
func (_e *PublisherServer_Expecter) CreateTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_CreateTopic_Call {
	return &PublisherServer_CreateTopic_Call{Call: _e.mock.On("CreateTopic", _a0, _a1)}
}

func (_c *PublisherServer_CreateTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.Topic)) *PublisherServer_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.Topic))
	})
	return _c
}

func (_c *PublisherServer_CreateTopic_Call) Return(_a0 *pubsubpb.Topic, _a1 error) *PublisherServer_CreateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_CreateTopic_Call) RunAndReturn(run func(context.Context, *pubsubpb.Topic) (*pubsubpb.Topic, error)) *PublisherServer_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DeleteTopic(_a0 context.Context, _a1 *pubsubpb.DeleteTopicRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteTopicRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DeleteTopicRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.DeleteTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type PublisherServer_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.DeleteTopicRequest
func (_e *PublisherServer_Expecter) DeleteTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_DeleteTopic_Call {
	return &PublisherServer_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic", _a0, _a1)}
}

func (_c *PublisherServer_DeleteTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.DeleteTopicRequest)) *PublisherServer_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.DeleteTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_DeleteTopic_Call) Return(_a0 *emptypb.Empty, _a1 error) *PublisherServer_DeleteTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_DeleteTopic_Call) RunAndReturn(run func(context.Context, *pubsubpb.DeleteTopicRequest) (*emptypb.Empty, error)) *PublisherServer_DeleteTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DetachSubscription provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) DetachSubscription(_a0 context.Context, _a1 *pubsubpb.DetachSubscriptionRequest) (*pubsubpb.DetachSubscriptionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.DetachSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DetachSubscriptionRequest) (*pubsubpb.DetachSubscriptionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.DetachSubscriptionRequest) *pubsubpb.DetachSubscriptionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.DetachSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.DetachSubscriptionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_DetachSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachSubscription'
type PublisherServer_DetachSubscription_Call struct {
	*mock.Call
}

// DetachSubscription is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.DetachSubscriptionRequest
func (_e *PublisherServer_Expecter) DetachSubscription(_a0 interface{}, _a1 interface{}) *PublisherServer_DetachSubscription_Call {
	return &PublisherServer_DetachSubscription_Call{Call: _e.mock.On("DetachSubscription", _a0, _a1)}
}

func (_c *PublisherServer_DetachSubscription_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.DetachSubscriptionRequest)) *PublisherServer_DetachSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.DetachSubscriptionRequest))
	})
	return _c
}

func (_c *PublisherServer_DetachSubscription_Call) Return(_a0 *pubsubpb.DetachSubscriptionResponse, _a1 error) *PublisherServer_DetachSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_DetachSubscription_Call) RunAndReturn(run func(context.Context, *pubsubpb.DetachSubscriptionRequest) (*pubsubpb.DetachSubscriptionResponse, error)) *PublisherServer_DetachSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) GetTopic(_a0 context.Context, _a1 *pubsubpb.GetTopicRequest) (*pubsubpb.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetTopicRequest) (*pubsubpb.Topic, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.GetTopicRequest) *pubsubpb.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.GetTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type PublisherServer_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.GetTopicRequest
func (_e *PublisherServer_Expecter) GetTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_GetTopic_Call {
	return &PublisherServer_GetTopic_Call{Call: _e.mock.On("GetTopic", _a0, _a1)}
}

func (_c *PublisherServer_GetTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.GetTopicRequest)) *PublisherServer_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.GetTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_GetTopic_Call) Return(_a0 *pubsubpb.Topic, _a1 error) *PublisherServer_GetTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_GetTopic_Call) RunAndReturn(run func(context.Context, *pubsubpb.GetTopicRequest) (*pubsubpb.Topic, error)) *PublisherServer_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopicSnapshots provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSnapshots(_a0 context.Context, _a1 *pubsubpb.ListTopicSnapshotsRequest) (*pubsubpb.ListTopicSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.ListTopicSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicSnapshotsRequest) (*pubsubpb.ListTopicSnapshotsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicSnapshotsRequest) *pubsubpb.ListTopicSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.ListTopicSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ListTopicSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopicSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopicSnapshots'
type PublisherServer_ListTopicSnapshots_Call struct {
	*mock.Call
}

// ListTopicSnapshots is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ListTopicSnapshotsRequest
func (_e *PublisherServer_Expecter) ListTopicSnapshots(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopicSnapshots_Call {
	return &PublisherServer_ListTopicSnapshots_Call{Call: _e.mock.On("ListTopicSnapshots", _a0, _a1)}
}

func (_c *PublisherServer_ListTopicSnapshots_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ListTopicSnapshotsRequest)) *PublisherServer_ListTopicSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ListTopicSnapshotsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopicSnapshots_Call) Return(_a0 *pubsubpb.ListTopicSnapshotsResponse, _a1 error) *PublisherServer_ListTopicSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_ListTopicSnapshots_Call) RunAndReturn(run func(context.Context, *pubsubpb.ListTopicSnapshotsRequest) (*pubsubpb.ListTopicSnapshotsResponse, error)) *PublisherServer_ListTopicSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopicSubscriptions provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopicSubscriptions(_a0 context.Context, _a1 *pubsubpb.ListTopicSubscriptionsRequest) (*pubsubpb.ListTopicSubscriptionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.ListTopicSubscriptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicSubscriptionsRequest) (*pubsubpb.ListTopicSubscriptionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicSubscriptionsRequest) *pubsubpb.ListTopicSubscriptionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.ListTopicSubscriptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ListTopicSubscriptionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopicSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopicSubscriptions'
type PublisherServer_ListTopicSubscriptions_Call struct {
	*mock.Call
}

// ListTopicSubscriptions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ListTopicSubscriptionsRequest
func (_e *PublisherServer_Expecter) ListTopicSubscriptions(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopicSubscriptions_Call {
	return &PublisherServer_ListTopicSubscriptions_Call{Call: _e.mock.On("ListTopicSubscriptions", _a0, _a1)}
}

func (_c *PublisherServer_ListTopicSubscriptions_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ListTopicSubscriptionsRequest)) *PublisherServer_ListTopicSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ListTopicSubscriptionsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopicSubscriptions_Call) Return(_a0 *pubsubpb.ListTopicSubscriptionsResponse, _a1 error) *PublisherServer_ListTopicSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_ListTopicSubscriptions_Call) RunAndReturn(run func(context.Context, *pubsubpb.ListTopicSubscriptionsRequest) (*pubsubpb.ListTopicSubscriptionsResponse, error)) *PublisherServer_ListTopicSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) ListTopics(_a0 context.Context, _a1 *pubsubpb.ListTopicsRequest) (*pubsubpb.ListTopicsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.ListTopicsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicsRequest) (*pubsubpb.ListTopicsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.ListTopicsRequest) *pubsubpb.ListTopicsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.ListTopicsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.ListTopicsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type PublisherServer_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.ListTopicsRequest
func (_e *PublisherServer_Expecter) ListTopics(_a0 interface{}, _a1 interface{}) *PublisherServer_ListTopics_Call {
	return &PublisherServer_ListTopics_Call{Call: _e.mock.On("ListTopics", _a0, _a1)}
}

func (_c *PublisherServer_ListTopics_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.ListTopicsRequest)) *PublisherServer_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.ListTopicsRequest))
	})
	return _c
}

func (_c *PublisherServer_ListTopics_Call) Return(_a0 *pubsubpb.ListTopicsResponse, _a1 error) *PublisherServer_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_ListTopics_Call) RunAndReturn(run func(context.Context, *pubsubpb.ListTopicsRequest) (*pubsubpb.ListTopicsResponse, error)) *PublisherServer_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) Publish(_a0 context.Context, _a1 *pubsubpb.PublishRequest) (*pubsubpb.PublishResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.PublishRequest) (*pubsubpb.PublishResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.PublishRequest) *pubsubpb.PublishResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.PublishRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type PublisherServer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.PublishRequest
func (_e *PublisherServer_Expecter) Publish(_a0 interface{}, _a1 interface{}) *PublisherServer_Publish_Call {
	return &PublisherServer_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *PublisherServer_Publish_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.PublishRequest)) *PublisherServer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.PublishRequest))
	})
	return _c
}

func (_c *PublisherServer_Publish_Call) Return(_a0 *pubsubpb.PublishResponse, _a1 error) *PublisherServer_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_Publish_Call) RunAndReturn(run func(context.Context, *pubsubpb.PublishRequest) (*pubsubpb.PublishResponse, error)) *PublisherServer_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTopic provides a mock function with given fields: _a0, _a1
func (_m *PublisherServer) UpdateTopic(_a0 context.Context, _a1 *pubsubpb.UpdateTopicRequest) (*pubsubpb.Topic, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pubsubpb.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateTopicRequest) (*pubsubpb.Topic, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pubsubpb.UpdateTopicRequest) *pubsubpb.Topic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pubsubpb.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pubsubpb.UpdateTopicRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublisherServer_UpdateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTopic'
type PublisherServer_UpdateTopic_Call struct {
	*mock.Call
}

// UpdateTopic is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pubsubpb.UpdateTopicRequest
func (_e *PublisherServer_Expecter) UpdateTopic(_a0 interface{}, _a1 interface{}) *PublisherServer_UpdateTopic_Call {
	return &PublisherServer_UpdateTopic_Call{Call: _e.mock.On("UpdateTopic", _a0, _a1)}
}

func (_c *PublisherServer_UpdateTopic_Call) Run(run func(_a0 context.Context, _a1 *pubsubpb.UpdateTopicRequest)) *PublisherServer_UpdateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pubsubpb.UpdateTopicRequest))
	})
	return _c
}

func (_c *PublisherServer_UpdateTopic_Call) Return(_a0 *pubsubpb.Topic, _a1 error) *PublisherServer_UpdateTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PublisherServer_UpdateTopic_Call) RunAndReturn(run func(context.Context, *pubsubpb.UpdateTopicRequest) (*pubsubpb.Topic, error)) *PublisherServer_UpdateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// NewPublisherServer creates a new instance of PublisherServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisherServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublisherServer {
	mock := &PublisherServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

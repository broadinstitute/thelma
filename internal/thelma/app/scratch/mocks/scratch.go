// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Scratch is an autogenerated mock type for the Scratch type
type Scratch struct {
	mock.Mock
}

type Scratch_Expecter struct {
	mock *mock.Mock
}

func (_m *Scratch) EXPECT() *Scratch_Expecter {
	return &Scratch_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields:
func (_m *Scratch) Cleanup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scratch_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type Scratch_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
func (_e *Scratch_Expecter) Cleanup() *Scratch_Cleanup_Call {
	return &Scratch_Cleanup_Call{Call: _e.mock.On("Cleanup")}
}

func (_c *Scratch_Cleanup_Call) Run(run func()) *Scratch_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Scratch_Cleanup_Call) Return(_a0 error) *Scratch_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Scratch_Cleanup_Call) RunAndReturn(run func() error) *Scratch_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// Mkdir provides a mock function with given fields: nickname
func (_m *Scratch) Mkdir(nickname string) (string, error) {
	ret := _m.Called(nickname)

	if len(ret) == 0 {
		panic("no return value specified for Mkdir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(nickname)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(nickname)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scratch_Mkdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mkdir'
type Scratch_Mkdir_Call struct {
	*mock.Call
}

// Mkdir is a helper method to define mock.On call
//   - nickname string
func (_e *Scratch_Expecter) Mkdir(nickname interface{}) *Scratch_Mkdir_Call {
	return &Scratch_Mkdir_Call{Call: _e.mock.On("Mkdir", nickname)}
}

func (_c *Scratch_Mkdir_Call) Run(run func(nickname string)) *Scratch_Mkdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Scratch_Mkdir_Call) Return(_a0 string, _a1 error) *Scratch_Mkdir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Scratch_Mkdir_Call) RunAndReturn(run func(string) (string, error)) *Scratch_Mkdir_Call {
	_c.Call.Return(run)
	return _c
}

// NewScratch creates a new instance of Scratch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScratch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scratch {
	mock := &Scratch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

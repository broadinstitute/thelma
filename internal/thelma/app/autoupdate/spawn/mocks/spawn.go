// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Spawn is an autogenerated mock type for the Spawn type
type Spawn struct {
	mock.Mock
}

type Spawn_Expecter struct {
	mock *mock.Mock
}

func (_m *Spawn) EXPECT() *Spawn_Expecter {
	return &Spawn_Expecter{mock: &_m.Mock}
}

// CurrentProcessIsSpawn provides a mock function with given fields:
func (_m *Spawn) CurrentProcessIsSpawn() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Spawn_CurrentProcessIsSpawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentProcessIsSpawn'
type Spawn_CurrentProcessIsSpawn_Call struct {
	*mock.Call
}

// CurrentProcessIsSpawn is a helper method to define mock.On call
func (_e *Spawn_Expecter) CurrentProcessIsSpawn() *Spawn_CurrentProcessIsSpawn_Call {
	return &Spawn_CurrentProcessIsSpawn_Call{Call: _e.mock.On("CurrentProcessIsSpawn")}
}

func (_c *Spawn_CurrentProcessIsSpawn_Call) Run(run func()) *Spawn_CurrentProcessIsSpawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Spawn_CurrentProcessIsSpawn_Call) Return(_a0 bool) *Spawn_CurrentProcessIsSpawn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Spawn_CurrentProcessIsSpawn_Call) RunAndReturn(run func() bool) *Spawn_CurrentProcessIsSpawn_Call {
	_c.Call.Return(run)
	return _c
}

// Spawn provides a mock function with given fields: args
func (_m *Spawn) Spawn(args ...string) error {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Spawn_Spawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Spawn'
type Spawn_Spawn_Call struct {
	*mock.Call
}

// Spawn is a helper method to define mock.On call
//   - args ...string
func (_e *Spawn_Expecter) Spawn(args ...interface{}) *Spawn_Spawn_Call {
	return &Spawn_Spawn_Call{Call: _e.mock.On("Spawn",
		append([]interface{}{}, args...)...)}
}

func (_c *Spawn_Spawn_Call) Run(run func(args ...string)) *Spawn_Spawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Spawn_Spawn_Call) Return(_a0 error) *Spawn_Spawn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Spawn_Spawn_Call) RunAndReturn(run func(...string) error) *Spawn_Spawn_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSpawn interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpawn creates a new instance of Spawn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpawn(t mockConstructorTestingTNewSpawn) *Spawn {
	mock := &Spawn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

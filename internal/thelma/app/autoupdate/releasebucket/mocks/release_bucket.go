// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	releasebucket "github.com/broadinstitute/thelma/internal/thelma/app/autoupdate/releasebucket"
	mock "github.com/stretchr/testify/mock"
)

// ReleaseBucket is an autogenerated mock type for the ReleaseBucket type
type ReleaseBucket struct {
	mock.Mock
}

type ReleaseBucket_Expecter struct {
	mock *mock.Mock
}

func (_m *ReleaseBucket) EXPECT() *ReleaseBucket_Expecter {
	return &ReleaseBucket_Expecter{mock: &_m.Mock}
}

// DownloadAndUnpack provides a mock function with given fields: archive
func (_m *ReleaseBucket) DownloadAndUnpack(archive releasebucket.Archive) (string, error) {
	ret := _m.Called(archive)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(releasebucket.Archive) (string, error)); ok {
		return rf(archive)
	}
	if rf, ok := ret.Get(0).(func(releasebucket.Archive) string); ok {
		r0 = rf(archive)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(releasebucket.Archive) error); ok {
		r1 = rf(archive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseBucket_DownloadAndUnpack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAndUnpack'
type ReleaseBucket_DownloadAndUnpack_Call struct {
	*mock.Call
}

// DownloadAndUnpack is a helper method to define mock.On call
//   - archive releasebucket.Archive
func (_e *ReleaseBucket_Expecter) DownloadAndUnpack(archive interface{}) *ReleaseBucket_DownloadAndUnpack_Call {
	return &ReleaseBucket_DownloadAndUnpack_Call{Call: _e.mock.On("DownloadAndUnpack", archive)}
}

func (_c *ReleaseBucket_DownloadAndUnpack_Call) Run(run func(archive releasebucket.Archive)) *ReleaseBucket_DownloadAndUnpack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(releasebucket.Archive))
	})
	return _c
}

func (_c *ReleaseBucket_DownloadAndUnpack_Call) Return(path string, err error) *ReleaseBucket_DownloadAndUnpack_Call {
	_c.Call.Return(path, err)
	return _c
}

func (_c *ReleaseBucket_DownloadAndUnpack_Call) RunAndReturn(run func(releasebucket.Archive) (string, error)) *ReleaseBucket_DownloadAndUnpack_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveTagOrVersion provides a mock function with given fields: tagOrVersion
func (_m *ReleaseBucket) ResolveTagOrVersion(tagOrVersion string) (string, error) {
	ret := _m.Called(tagOrVersion)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tagOrVersion)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tagOrVersion)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tagOrVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseBucket_ResolveTagOrVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveTagOrVersion'
type ReleaseBucket_ResolveTagOrVersion_Call struct {
	*mock.Call
}

// ResolveTagOrVersion is a helper method to define mock.On call
//   - tagOrVersion string
func (_e *ReleaseBucket_Expecter) ResolveTagOrVersion(tagOrVersion interface{}) *ReleaseBucket_ResolveTagOrVersion_Call {
	return &ReleaseBucket_ResolveTagOrVersion_Call{Call: _e.mock.On("ResolveTagOrVersion", tagOrVersion)}
}

func (_c *ReleaseBucket_ResolveTagOrVersion_Call) Run(run func(tagOrVersion string)) *ReleaseBucket_ResolveTagOrVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ReleaseBucket_ResolveTagOrVersion_Call) Return(_a0 string, _a1 error) *ReleaseBucket_ResolveTagOrVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReleaseBucket_ResolveTagOrVersion_Call) RunAndReturn(run func(string) (string, error)) *ReleaseBucket_ResolveTagOrVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewReleaseBucket creates a new instance of ReleaseBucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseBucket {
	mock := &ReleaseBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	installer "github.com/broadinstitute/thelma/internal/thelma/app/autoupdate/installer"
	mock "github.com/stretchr/testify/mock"
)

// Installer is an autogenerated mock type for the Installer type
type Installer struct {
	mock.Mock
}

type Installer_Expecter struct {
	mock *mock.Mock
}

func (_m *Installer) EXPECT() *Installer_Expecter {
	return &Installer_Expecter{mock: &_m.Mock}
}

// ResolveVersions provides a mock function with given fields: versionOrTag
func (_m *Installer) ResolveVersions(versionOrTag string) (installer.ResolvedVersions, error) {
	ret := _m.Called(versionOrTag)

	if len(ret) == 0 {
		panic("no return value specified for ResolveVersions")
	}

	var r0 installer.ResolvedVersions
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (installer.ResolvedVersions, error)); ok {
		return rf(versionOrTag)
	}
	if rf, ok := ret.Get(0).(func(string) installer.ResolvedVersions); ok {
		r0 = rf(versionOrTag)
	} else {
		r0 = ret.Get(0).(installer.ResolvedVersions)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(versionOrTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Installer_ResolveVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveVersions'
type Installer_ResolveVersions_Call struct {
	*mock.Call
}

// ResolveVersions is a helper method to define mock.On call
//   - versionOrTag string
func (_e *Installer_Expecter) ResolveVersions(versionOrTag interface{}) *Installer_ResolveVersions_Call {
	return &Installer_ResolveVersions_Call{Call: _e.mock.On("ResolveVersions", versionOrTag)}
}

func (_c *Installer_ResolveVersions_Call) Run(run func(versionOrTag string)) *Installer_ResolveVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Installer_ResolveVersions_Call) Return(_a0 installer.ResolvedVersions, _a1 error) *Installer_ResolveVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Installer_ResolveVersions_Call) RunAndReturn(run func(string) (installer.ResolvedVersions, error)) *Installer_ResolveVersions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateThelma provides a mock function with given fields: versionOrTag
func (_m *Installer) UpdateThelma(versionOrTag string) error {
	ret := _m.Called(versionOrTag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThelma")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(versionOrTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Installer_UpdateThelma_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateThelma'
type Installer_UpdateThelma_Call struct {
	*mock.Call
}

// UpdateThelma is a helper method to define mock.On call
//   - versionOrTag string
func (_e *Installer_Expecter) UpdateThelma(versionOrTag interface{}) *Installer_UpdateThelma_Call {
	return &Installer_UpdateThelma_Call{Call: _e.mock.On("UpdateThelma", versionOrTag)}
}

func (_c *Installer_UpdateThelma_Call) Run(run func(versionOrTag string)) *Installer_UpdateThelma_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Installer_UpdateThelma_Call) Return(_a0 error) *Installer_UpdateThelma_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Installer_UpdateThelma_Call) RunAndReturn(run func(string) error) *Installer_UpdateThelma_Call {
	_c.Call.Return(run)
	return _c
}

// NewInstaller creates a new instance of Installer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Installer {
	mock := &Installer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

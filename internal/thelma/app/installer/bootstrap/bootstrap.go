package bootstrap

import (
	"bytes"
	_ "embed"
	"fmt"
	"github.com/broadinstitute/thelma/internal/thelma/app/config"
	"github.com/broadinstitute/thelma/internal/thelma/app/name"
	"github.com/broadinstitute/thelma/internal/thelma/app/root"
	"github.com/broadinstitute/thelma/internal/thelma/utils"
	"github.com/broadinstitute/thelma/internal/thelma/utils/prompt"
	"github.com/broadinstitute/thelma/internal/thelma/utils/shell"
	"github.com/rs/zerolog/log"
	"os"
	"path"
	"text/template"
	"time"
)

const zshrcFile = ".zshrc"
const shellInitializationFile = "init.zsh"
const shellCompletionFile = "completion.zsh"

//go:embed templates/config.yaml.gotmpl
var configTemplate string

//go:embed templates/init.zsh.gotmpl
var thelmaInitTemplate string

//go:embed templates/zshrc.fragment.gotmpl
var zshrcFragmentTemplate string

type thelmaInitTemplateContext struct {
	AddToolsToPath        bool
	EnableShellCompletion bool
	CurrentReleaseSymlink string
	ShellCompletionFile   string
}

// PathToRunningThelmaBinary returns the path to the currently-running
// Thelma binary. Note that this could be outside Thelma's configured root directory
// (i.e., not ~/.thelma/releases/current/bin).
// During installation bootstrapping, a Thelma release archive is unpacked into a temp
// directory and run from there, and there are no releases installed in ~/.thelma/releases yet.
func PathToRunningThelmaBinary() (string, error) {
	executable, err := os.Executable()
	if err != nil {
		return "", fmt.Errorf("error finding path to currently running executable: %v", err)
	}
	if path.Base(executable) != name.Name {
		return "", fmt.Errorf("currently running executable is not a thelma command: %s", executable)
	}
	return executable, nil
}

// TODO
//* Create skeleton config.yaml with `home` set to THELMA_HOME
//* Prompt the user:
//  * Prepend PATH with thelma’s bundled tools (this includes kubectl, helm, helmfile, vault client, and more)? [Y/n]
//  * Enable shell completion for Thelma commands? [Y/n]
//* Generate ~/.thelma/shell/completion.zsh
//  * This is trivial thanks to Cobra’s neat shell completion feature!
//* Generate ~/.thelma/shell/thelma.zsh, which
//  * Includes a “Warning: auto-generated by Thelma’s bootstrap process; do not manually edit this file!” comment
//  * Adds ~/.thelma/releases/current/bin to PATH
//  * Adds ~/.thelma/releases/current/tools/bin to PATH (if user answered “yes”)
//  * Enables shell completion (if user answered “yes”)
//    * source ~/.thelma/shell/completion.zsh && compdef _thelma thelma
//* Add the following line to ~/.zshrc if it does not exist:
//  * [ -f ~/.thelma/shell/thelma.zsh ] && source .thelma/shell/thelma.zsh
//  * .zshrc will backed up to ~/.zshrc.bak before writing changes

type Bootstrapper interface {
	// Bootstrap will bootstrap a thelma installation, including:
	// * creating skeleton config.yaml with `home` set to THELMA_HOME
	// * optionally generating shell scripts that:
	//    * add thelma's bundled tools to PATH
	//    * set up shell completion for thelma
	// * updating user's ~/.zshrc to include thelma on PATH
	Bootstrap() error
}

func NewBootstrapper(root root.Root, config config.Config, runner shell.Runner) Bootstrapper {
	return &bootstrapper{
		root:        root,
		config:      config,
		shellRunner: runner,
	}
}

type bootstrapper struct {
	root        root.Root
	config      config.Config
	shellRunner shell.Runner
}

func (b *bootstrapper) Bootstrap() error {
	_prompt, err := prompt.New()
	if err != nil {
		return err
	}
	addToolsToPath, err := _prompt.Confirm("Prepend PATH with thelma’s bundled tools (this includes kubectl, helm, helmfile, vault client, and more)?", true)
	if err != nil {
		return err
	}
	enableShellCompletion, err := _prompt.Confirm("Enable shell completion for Thelma commands?", true)
	if err != nil {
		return err
	}

	if err = b.writeSkeletonConfigFile(); err != nil {
		return err
	}

	if enableShellCompletion {
		if err = b.writeThelmaShellCompletionZsh(); err != nil {
			return err
		}
	}

	if err = b.writeThelmaInitZsh(thelmaInitTemplateContext{
		AddToolsToPath:        addToolsToPath,
		EnableShellCompletion: enableShellCompletion,
		CurrentReleaseSymlink: b.root.ReleasesDir().CurrentSymlink(),
		ShellCompletionFile:   b.shellCompletionFile(),
	}); err != nil {
		return err
	}

	return b.addThelmaInitToZshrc()
}

func (b *bootstrapper) addThelmaInitToZshrc() error {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return fmt.Errorf("could not identify user home directory: %v", err)
	}

	// render thelma shell initialization fragment that we will add to zshrc
	zshrcTemplate, err := template.New(zshrcFile).Parse(zshrcFragmentTemplate)
	if err != nil {
		panic(fmt.Errorf("failed to parse template for %s: %v", zshrcFile, err))
	}

	var buf bytes.Buffer
	err = zshrcTemplate.Execute(&buf, struct {
		ShellInitializationFile string
	}{
		ShellInitializationFile: b.shellInitializationFile(),
	})
	if err != nil {
		return fmt.Errorf("error rendering template for %s: %v", zshrcFile, err)
	}
	fragment := buf.Bytes()

	// create empty ~/.zshrc if it doesn't exist
	zshrc := path.Join(homeDir, zshrcFile)
	exists, err := utils.FileExists(zshrc)
	if err != nil {
		return fmt.Errorf("error adding thelma initialization to %s: %v", zshrc, err)
	}
	if !exists {
		log.Warn().Msgf("%s does not exist; creating empty file", zshrc)
		if err = os.WriteFile(zshrc, []byte{}, 0644); err != nil {
			return fmt.Errorf("error adding thelma initialization to %s: %v", zshrc, err)
		}
	}

	// read content and scan to see if it already includes the fragment
	content, err := os.ReadFile(zshrc)
	if err != nil {
		return fmt.Errorf("error adding thelma initialization to %s: %v", zshrc, err)
	}

	if bytes.Contains(content, fragment) {
		log.Info().Msgf("%s already includes Thelma initialization; won't update", zshrc)
		return nil
	}
	if bytes.Contains(content, []byte(name.Name)) {
		log.Warn().Msgf(
			"%s contains a reference to %s; won't update."+
				"Consider adding the following lines manually:\n\n%s"+name.Name, fragment, zshrc)
	}

	backupFile := fmt.Sprintf("%s.%s", zshrc, time.Now().Format("20060102.150405"))
	log.Info().Msgf("Backing up %s to %s", zshrc, backupFile)

	if err = os.WriteFile(backupFile, content, 0644); err != nil {
		return fmt.Errorf("error backing up %s: %v", zshrc, err)
	}

	f, err := os.OpenFile(zshrc, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0644)
	if err != nil {
		return fmt.Errorf("error updating %s: %v", zshrc, err)
	}

	log.Info().Msgf("Adding Thelma initialization to %s", zshrc)
	_, err = f.Write(fragment)
	if err != nil {
		err = fmt.Errorf("error updating %s: %v", zshrc, err)
	}

	return utils.CloseWarn(f, err)
}

func (b *bootstrapper) writeThelmaInitZsh(ctx thelmaInitTemplateContext) error {
	file := b.shellInitializationFile()
	log.Info().Msgf("Writing shell init script to %s...", file)
	return renderTemplateToFile(thelmaInitTemplate, ctx, file)
}

// run `thelma completion zsh` (this leverages Cobra's built-in shell completion support,
// see https://github.com/spf13/cobra/blob/main/shell_completions.md)
func (b *bootstrapper) writeThelmaShellCompletionZsh() error {
	file := b.shellCompletionFile()
	f, err := os.OpenFile(file, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0755)
	if err != nil {
		return fmt.Errorf("error generating shell complation file %s: %v", file, err)
	}

	executable, err := PathToRunningThelmaBinary()
	if err != nil {
		return fmt.Errorf("error generating shell complation file %s: %v", file, err)
	}

	log.Info().Msgf("Writing shell completion script to %s...", file)
	err = b.shellRunner.Run(shell.Command{
		Prog: executable,
		Args: []string{"completion", "zsh"},
	}, func(options *shell.RunOptions) {
		options.Stdout = f
	})

	if err != nil {
		err = fmt.Errorf("error generating shell completion file %s: %v", file, err)
	}

	return utils.CloseWarn(f, err)
}

// write a ~/.thelma/config.yaml file that configures thelma's home directory and nothing else
func (b *bootstrapper) writeSkeletonConfigFile() error {
	configFile := config.DefaultConfigFilePath(b.root)
	exists, err := utils.FileExists(configFile)
	if err != nil {
		return fmt.Errorf("error generating skeleton Thelma config file: %v", err)
	}
	if exists {
		log.Warn().Msgf("%s exists; won't generate skeleton Thelma config file", configFile)
		return nil
	}

	ctx := struct {
		Home string
	}{
		Home: b.config.Home(),
	}

	log.Info().Msgf("Writing skeleton config file to %s...", configFile)
	return renderTemplateToFile(configTemplate, ctx, configFile)
}

// Return full path to Thelma's shell initialization file
// eg. ~/.thelma/shell/init.zsh
func (b *bootstrapper) shellInitializationFile() string {
	return path.Join(b.root.ShellDir(), shellInitializationFile)
}

// Return full path to Thelma's shell completion file
// eg. ~/.thelma/shell/completion.zsh
func (b *bootstrapper) shellCompletionFile() string {
	return path.Join(b.root.ShellDir(), shellCompletionFile)
}

func renderTemplateToFile(templateString string, ctx interface{}, file string) error {
	templateName := path.Base(file)
	tmpl, err := template.New(templateName).Parse(templateString)
	if err != nil {
		panic(fmt.Errorf("failed to parse embedded template %s: %v", templateName, err))
	}

	f, err := os.OpenFile(file, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		return fmt.Errorf("error opening %s for rendering: %v", file, err)
	}

	err = tmpl.Execute(f, ctx)
	if err != nil {
		err = fmt.Errorf("failed to render file %s from template: %v", file, err)
	}

	return utils.CloseWarn(f, err)
}

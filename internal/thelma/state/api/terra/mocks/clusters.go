// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// Clusters is an autogenerated mock type for the Clusters type
type Clusters struct {
	mock.Mock
}

type Clusters_Expecter struct {
	mock *mock.Mock
}

func (_m *Clusters) EXPECT() *Clusters_Expecter {
	return &Clusters_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields:
func (_m *Clusters) All() ([]terra.Cluster, error) {
	ret := _m.Called()

	var r0 []terra.Cluster
	if rf, ok := ret.Get(0).(func() []terra.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]terra.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Clusters_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Clusters_Expecter) All() *Clusters_All_Call {
	return &Clusters_All_Call{Call: _e.mock.On("All")}
}

func (_c *Clusters_All_Call) Run(run func()) *Clusters_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Clusters_All_Call) Return(_a0 []terra.Cluster, _a1 error) *Clusters_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Exists provides a mock function with given fields: name
func (_m *Clusters) Exists(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Clusters_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - name string
func (_e *Clusters_Expecter) Exists(name interface{}) *Clusters_Exists_Call {
	return &Clusters_Exists_Call{Call: _e.mock.On("Exists", name)}
}

func (_c *Clusters_Exists_Call) Run(run func(name string)) *Clusters_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Clusters_Exists_Call) Return(_a0 bool, _a1 error) *Clusters_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *Clusters) Get(name string) (terra.Cluster, error) {
	ret := _m.Called(name)

	var r0 terra.Cluster
	if rf, ok := ret.Get(0).(func(string) terra.Cluster); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terra.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Clusters_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *Clusters_Expecter) Get(name interface{}) *Clusters_Get_Call {
	return &Clusters_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *Clusters_Get_Call) Run(run func(name string)) *Clusters_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Clusters_Get_Call) Return(_a0 terra.Cluster, _a1 error) *Clusters_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewClusters interface {
	mock.TestingT
	Cleanup(func())
}

// NewClusters creates a new instance of Clusters. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClusters(t mockConstructorTestingTNewClusters) *Clusters {
	mock := &Clusters{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

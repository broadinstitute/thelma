// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// StateLoader is an autogenerated mock type for the StateLoader type
type StateLoader struct {
	mock.Mock
}

type StateLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *StateLoader) EXPECT() *StateLoader_Expecter {
	return &StateLoader_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with given fields:
func (_m *StateLoader) Load() (terra.State, error) {
	ret := _m.Called()

	var r0 terra.State
	if rf, ok := ret.Get(0).(func() terra.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terra.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateLoader_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type StateLoader_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *StateLoader_Expecter) Load() *StateLoader_Load_Call {
	return &StateLoader_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *StateLoader_Load_Call) Run(run func()) *StateLoader_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateLoader_Load_Call) Return(_a0 terra.State, _a1 error) *StateLoader_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Reload provides a mock function with given fields:
func (_m *StateLoader) Reload() (terra.State, error) {
	ret := _m.Called()

	var r0 terra.State
	if rf, ok := ret.Get(0).(func() terra.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terra.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateLoader_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type StateLoader_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
func (_e *StateLoader_Expecter) Reload() *StateLoader_Reload_Call {
	return &StateLoader_Reload_Call{Call: _e.mock.On("Reload")}
}

func (_c *StateLoader_Reload_Call) Run(run func()) *StateLoader_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateLoader_Reload_Call) Return(_a0 terra.State, _a1 error) *StateLoader_Reload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStateLoader interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateLoader creates a new instance of StateLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateLoader(t mockConstructorTestingTNewStateLoader) *StateLoader {
	mock := &StateLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

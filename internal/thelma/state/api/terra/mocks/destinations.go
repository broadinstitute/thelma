// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// Destinations is an autogenerated mock type for the Destinations type
type Destinations struct {
	mock.Mock
}

type Destinations_Expecter struct {
	mock *mock.Mock
}

func (_m *Destinations) EXPECT() *Destinations_Expecter {
	return &Destinations_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields:
func (_m *Destinations) All() ([]terra.Destination, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []terra.Destination
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]terra.Destination, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []terra.Destination); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]terra.Destination)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destinations_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Destinations_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Destinations_Expecter) All() *Destinations_All_Call {
	return &Destinations_All_Call{Call: _e.mock.On("All")}
}

func (_c *Destinations_All_Call) Run(run func()) *Destinations_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Destinations_All_Call) Return(_a0 []terra.Destination, _a1 error) *Destinations_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Destinations_All_Call) RunAndReturn(run func() ([]terra.Destination, error)) *Destinations_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *Destinations) Get(name string) (terra.Destination, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 terra.Destination
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (terra.Destination, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) terra.Destination); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terra.Destination)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destinations_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Destinations_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *Destinations_Expecter) Get(name interface{}) *Destinations_Get_Call {
	return &Destinations_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *Destinations_Get_Call) Run(run func(name string)) *Destinations_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Destinations_Get_Call) Return(_a0 terra.Destination, _a1 error) *Destinations_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Destinations_Get_Call) RunAndReturn(run func(string) (terra.Destination, error)) *Destinations_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewDestinations creates a new instance of Destinations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDestinations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Destinations {
	mock := &Destinations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

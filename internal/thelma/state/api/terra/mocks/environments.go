// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// Environments is an autogenerated mock type for the Environments type
type Environments struct {
	mock.Mock
}

type Environments_Expecter struct {
	mock *mock.Mock
}

func (_m *Environments) EXPECT() *Environments_Expecter {
	return &Environments_Expecter{mock: &_m.Mock}
}

// All provides a mock function with given fields:
func (_m *Environments) All() ([]terra.Environment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []terra.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]terra.Environment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []terra.Environment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]terra.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type Environments_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *Environments_Expecter) All() *Environments_All_Call {
	return &Environments_All_Call{Call: _e.mock.On("All")}
}

func (_c *Environments_All_Call) Run(run func()) *Environments_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Environments_All_Call) Return(_a0 []terra.Environment, _a1 error) *Environments_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_All_Call) RunAndReturn(run func() ([]terra.Environment, error)) *Environments_All_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFromTemplate provides a mock function with given fields: template, opts
func (_m *Environments) CreateFromTemplate(template terra.Environment, opts terra.CreateOptions) (string, error) {
	ret := _m.Called(template, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateFromTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(terra.Environment, terra.CreateOptions) (string, error)); ok {
		return rf(template, opts)
	}
	if rf, ok := ret.Get(0).(func(terra.Environment, terra.CreateOptions) string); ok {
		r0 = rf(template, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(terra.Environment, terra.CreateOptions) error); ok {
		r1 = rf(template, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_CreateFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFromTemplate'
type Environments_CreateFromTemplate_Call struct {
	*mock.Call
}

// CreateFromTemplate is a helper method to define mock.On call
//   - template terra.Environment
//   - opts terra.CreateOptions
func (_e *Environments_Expecter) CreateFromTemplate(template interface{}, opts interface{}) *Environments_CreateFromTemplate_Call {
	return &Environments_CreateFromTemplate_Call{Call: _e.mock.On("CreateFromTemplate", template, opts)}
}

func (_c *Environments_CreateFromTemplate_Call) Run(run func(template terra.Environment, opts terra.CreateOptions)) *Environments_CreateFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.Environment), args[1].(terra.CreateOptions))
	})
	return _c
}

func (_c *Environments_CreateFromTemplate_Call) Return(_a0 string, _a1 error) *Environments_CreateFromTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_CreateFromTemplate_Call) RunAndReturn(run func(terra.Environment, terra.CreateOptions) (string, error)) *Environments_CreateFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name
func (_m *Environments) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Environments_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Environments_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
func (_e *Environments_Expecter) Delete(name interface{}) *Environments_Delete_Call {
	return &Environments_Delete_Call{Call: _e.mock.On("Delete", name)}
}

func (_c *Environments_Delete_Call) Run(run func(name string)) *Environments_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environments_Delete_Call) Return(_a0 error) *Environments_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environments_Delete_Call) RunAndReturn(run func(string) error) *Environments_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DisableRelease provides a mock function with given fields: environmentName, releaseName
func (_m *Environments) DisableRelease(environmentName string, releaseName string) error {
	ret := _m.Called(environmentName, releaseName)

	if len(ret) == 0 {
		panic("no return value specified for DisableRelease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(environmentName, releaseName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Environments_DisableRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableRelease'
type Environments_DisableRelease_Call struct {
	*mock.Call
}

// DisableRelease is a helper method to define mock.On call
//   - environmentName string
//   - releaseName string
func (_e *Environments_Expecter) DisableRelease(environmentName interface{}, releaseName interface{}) *Environments_DisableRelease_Call {
	return &Environments_DisableRelease_Call{Call: _e.mock.On("DisableRelease", environmentName, releaseName)}
}

func (_c *Environments_DisableRelease_Call) Run(run func(environmentName string, releaseName string)) *Environments_DisableRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Environments_DisableRelease_Call) Return(_a0 error) *Environments_DisableRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environments_DisableRelease_Call) RunAndReturn(run func(string, string) error) *Environments_DisableRelease_Call {
	_c.Call.Return(run)
	return _c
}

// EnableRelease provides a mock function with given fields: environmentName, releaseName
func (_m *Environments) EnableRelease(environmentName string, releaseName string) error {
	ret := _m.Called(environmentName, releaseName)

	if len(ret) == 0 {
		panic("no return value specified for EnableRelease")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(environmentName, releaseName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Environments_EnableRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableRelease'
type Environments_EnableRelease_Call struct {
	*mock.Call
}

// EnableRelease is a helper method to define mock.On call
//   - environmentName string
//   - releaseName string
func (_e *Environments_Expecter) EnableRelease(environmentName interface{}, releaseName interface{}) *Environments_EnableRelease_Call {
	return &Environments_EnableRelease_Call{Call: _e.mock.On("EnableRelease", environmentName, releaseName)}
}

func (_c *Environments_EnableRelease_Call) Run(run func(environmentName string, releaseName string)) *Environments_EnableRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Environments_EnableRelease_Call) Return(_a0 error) *Environments_EnableRelease_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environments_EnableRelease_Call) RunAndReturn(run func(string, string) error) *Environments_EnableRelease_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: name
func (_m *Environments) Exists(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type Environments_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - name string
func (_e *Environments_Expecter) Exists(name interface{}) *Environments_Exists_Call {
	return &Environments_Exists_Call{Call: _e.mock.On("Exists", name)}
}

func (_c *Environments_Exists_Call) Run(run func(name string)) *Environments_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environments_Exists_Call) Return(_a0 bool, _a1 error) *Environments_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_Exists_Call) RunAndReturn(run func(string) (bool, error)) *Environments_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Filter provides a mock function with given fields: filter
func (_m *Environments) Filter(filter terra.EnvironmentFilter) ([]terra.Environment, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []terra.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(terra.EnvironmentFilter) ([]terra.Environment, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(terra.EnvironmentFilter) []terra.Environment); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]terra.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(terra.EnvironmentFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type Environments_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - filter terra.EnvironmentFilter
func (_e *Environments_Expecter) Filter(filter interface{}) *Environments_Filter_Call {
	return &Environments_Filter_Call{Call: _e.mock.On("Filter", filter)}
}

func (_c *Environments_Filter_Call) Run(run func(filter terra.EnvironmentFilter)) *Environments_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.EnvironmentFilter))
	})
	return _c
}

func (_c *Environments_Filter_Call) Return(_a0 []terra.Environment, _a1 error) *Environments_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_Filter_Call) RunAndReturn(run func(terra.EnvironmentFilter) ([]terra.Environment, error)) *Environments_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *Environments) Get(name string) (terra.Environment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 terra.Environment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (terra.Environment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) terra.Environment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terra.Environment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Environments_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *Environments_Expecter) Get(name interface{}) *Environments_Get_Call {
	return &Environments_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *Environments_Get_Call) Run(run func(name string)) *Environments_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environments_Get_Call) Return(_a0 terra.Environment, _a1 error) *Environments_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_Get_Call) RunAndReturn(run func(string) (terra.Environment, error)) *Environments_Get_Call {
	_c.Call.Return(run)
	return _c
}

// PinEnvironmentToTerraHelmfileRef provides a mock function with given fields: environmentName, terraHelmfileRef
func (_m *Environments) PinEnvironmentToTerraHelmfileRef(environmentName string, terraHelmfileRef string) error {
	ret := _m.Called(environmentName, terraHelmfileRef)

	if len(ret) == 0 {
		panic("no return value specified for PinEnvironmentToTerraHelmfileRef")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(environmentName, terraHelmfileRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Environments_PinEnvironmentToTerraHelmfileRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinEnvironmentToTerraHelmfileRef'
type Environments_PinEnvironmentToTerraHelmfileRef_Call struct {
	*mock.Call
}

// PinEnvironmentToTerraHelmfileRef is a helper method to define mock.On call
//   - environmentName string
//   - terraHelmfileRef string
func (_e *Environments_Expecter) PinEnvironmentToTerraHelmfileRef(environmentName interface{}, terraHelmfileRef interface{}) *Environments_PinEnvironmentToTerraHelmfileRef_Call {
	return &Environments_PinEnvironmentToTerraHelmfileRef_Call{Call: _e.mock.On("PinEnvironmentToTerraHelmfileRef", environmentName, terraHelmfileRef)}
}

func (_c *Environments_PinEnvironmentToTerraHelmfileRef_Call) Run(run func(environmentName string, terraHelmfileRef string)) *Environments_PinEnvironmentToTerraHelmfileRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Environments_PinEnvironmentToTerraHelmfileRef_Call) Return(_a0 error) *Environments_PinEnvironmentToTerraHelmfileRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environments_PinEnvironmentToTerraHelmfileRef_Call) RunAndReturn(run func(string, string) error) *Environments_PinEnvironmentToTerraHelmfileRef_Call {
	_c.Call.Return(run)
	return _c
}

// PinVersions provides a mock function with given fields: environmentName, versions
func (_m *Environments) PinVersions(environmentName string, versions map[string]terra.VersionOverride) (map[string]terra.VersionOverride, error) {
	ret := _m.Called(environmentName, versions)

	if len(ret) == 0 {
		panic("no return value specified for PinVersions")
	}

	var r0 map[string]terra.VersionOverride
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]terra.VersionOverride) (map[string]terra.VersionOverride, error)); ok {
		return rf(environmentName, versions)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]terra.VersionOverride) map[string]terra.VersionOverride); ok {
		r0 = rf(environmentName, versions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]terra.VersionOverride)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]terra.VersionOverride) error); ok {
		r1 = rf(environmentName, versions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_PinVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PinVersions'
type Environments_PinVersions_Call struct {
	*mock.Call
}

// PinVersions is a helper method to define mock.On call
//   - environmentName string
//   - versions map[string]terra.VersionOverride
func (_e *Environments_Expecter) PinVersions(environmentName interface{}, versions interface{}) *Environments_PinVersions_Call {
	return &Environments_PinVersions_Call{Call: _e.mock.On("PinVersions", environmentName, versions)}
}

func (_c *Environments_PinVersions_Call) Run(run func(environmentName string, versions map[string]terra.VersionOverride)) *Environments_PinVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]terra.VersionOverride))
	})
	return _c
}

func (_c *Environments_PinVersions_Call) Return(_a0 map[string]terra.VersionOverride, _a1 error) *Environments_PinVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_PinVersions_Call) RunAndReturn(run func(string, map[string]terra.VersionOverride) (map[string]terra.VersionOverride, error)) *Environments_PinVersions_Call {
	_c.Call.Return(run)
	return _c
}

// SetOffline provides a mock function with given fields: name, offline
func (_m *Environments) SetOffline(name string, offline bool) error {
	ret := _m.Called(name, offline)

	if len(ret) == 0 {
		panic("no return value specified for SetOffline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, offline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Environments_SetOffline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffline'
type Environments_SetOffline_Call struct {
	*mock.Call
}

// SetOffline is a helper method to define mock.On call
//   - name string
//   - offline bool
func (_e *Environments_Expecter) SetOffline(name interface{}, offline interface{}) *Environments_SetOffline_Call {
	return &Environments_SetOffline_Call{Call: _e.mock.On("SetOffline", name, offline)}
}

func (_c *Environments_SetOffline_Call) Run(run func(name string, offline bool)) *Environments_SetOffline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Environments_SetOffline_Call) Return(_a0 error) *Environments_SetOffline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environments_SetOffline_Call) RunAndReturn(run func(string, bool) error) *Environments_SetOffline_Call {
	_c.Call.Return(run)
	return _c
}

// UnpinVersions provides a mock function with given fields: environmentName
func (_m *Environments) UnpinVersions(environmentName string) (map[string]terra.VersionOverride, error) {
	ret := _m.Called(environmentName)

	if len(ret) == 0 {
		panic("no return value specified for UnpinVersions")
	}

	var r0 map[string]terra.VersionOverride
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]terra.VersionOverride, error)); ok {
		return rf(environmentName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]terra.VersionOverride); ok {
		r0 = rf(environmentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]terra.VersionOverride)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(environmentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments_UnpinVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnpinVersions'
type Environments_UnpinVersions_Call struct {
	*mock.Call
}

// UnpinVersions is a helper method to define mock.On call
//   - environmentName string
func (_e *Environments_Expecter) UnpinVersions(environmentName interface{}) *Environments_UnpinVersions_Call {
	return &Environments_UnpinVersions_Call{Call: _e.mock.On("UnpinVersions", environmentName)}
}

func (_c *Environments_UnpinVersions_Call) Run(run func(environmentName string)) *Environments_UnpinVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environments_UnpinVersions_Call) Return(_a0 map[string]terra.VersionOverride, _a1 error) *Environments_UnpinVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Environments_UnpinVersions_Call) RunAndReturn(run func(string) (map[string]terra.VersionOverride, error)) *Environments_UnpinVersions_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnvironments creates a new instance of Environments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvironments(t interface {
	mock.TestingT
	Cleanup(func())
}) *Environments {
	mock := &Environments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

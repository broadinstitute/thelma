// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AutoDelete is an autogenerated mock type for the AutoDelete type
type AutoDelete struct {
	mock.Mock
}

type AutoDelete_Expecter struct {
	mock *mock.Mock
}

func (_m *AutoDelete) EXPECT() *AutoDelete_Expecter {
	return &AutoDelete_Expecter{mock: &_m.Mock}
}

// After provides a mock function with given fields:
func (_m *AutoDelete) After() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// AutoDelete_After_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'After'
type AutoDelete_After_Call struct {
	*mock.Call
}

// After is a helper method to define mock.On call
func (_e *AutoDelete_Expecter) After() *AutoDelete_After_Call {
	return &AutoDelete_After_Call{Call: _e.mock.On("After")}
}

func (_c *AutoDelete_After_Call) Run(run func()) *AutoDelete_After_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AutoDelete_After_Call) Return(_a0 time.Time) *AutoDelete_After_Call {
	_c.Call.Return(_a0)
	return _c
}

// Enabled provides a mock function with given fields:
func (_m *AutoDelete) Enabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AutoDelete_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type AutoDelete_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *AutoDelete_Expecter) Enabled() *AutoDelete_Enabled_Call {
	return &AutoDelete_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *AutoDelete_Enabled_Call) Run(run func()) *AutoDelete_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AutoDelete_Enabled_Call) Return(_a0 bool) *AutoDelete_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAutoDelete interface {
	mock.TestingT
	Cleanup(func())
}

// NewAutoDelete creates a new instance of AutoDelete. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAutoDelete(t mockConstructorTestingTNewAutoDelete) *AutoDelete {
	mock := &AutoDelete{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sherlock "github.com/broadinstitute/thelma/internal/thelma/clients/sherlock"

	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
)

// StateReadWriter is an autogenerated mock type for the StateReadWriter type
type StateReadWriter struct {
	mock.Mock
}

// ClusterReleases provides a mock function with given fields: clusterName
func (_m *StateReadWriter) ClusterReleases(clusterName string) (sherlock.Releases, error) {
	ret := _m.Called(clusterName)

	var r0 sherlock.Releases
	if rf, ok := ret.Get(0).(func(string) sherlock.Releases); ok {
		r0 = rf(clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sherlock.Releases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clusters provides a mock function with given fields:
func (_m *StateReadWriter) Clusters() (sherlock.Clusters, error) {
	ret := _m.Called()

	var r0 sherlock.Clusters
	if rf, ok := ret.Get(0).(func() sherlock.Clusters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sherlock.Clusters)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvironmentReleases provides a mock function with given fields: environmentName
func (_m *StateReadWriter) EnvironmentReleases(environmentName string) (sherlock.Releases, error) {
	ret := _m.Called(environmentName)

	var r0 sherlock.Releases
	if rf, ok := ret.Get(0).(func(string) sherlock.Releases); ok {
		r0 = rf(environmentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sherlock.Releases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(environmentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Environments provides a mock function with given fields:
func (_m *StateReadWriter) Environments() (sherlock.Environments, error) {
	ret := _m.Called()

	var r0 sherlock.Environments
	if rf, ok := ret.Get(0).(func() sherlock.Environments); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sherlock.Environments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteClusters provides a mock function with given fields: _a0
func (_m *StateReadWriter) WriteClusters(_a0 []terra.Cluster) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]terra.Cluster) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteEnvironments provides a mock function with given fields: _a0
func (_m *StateReadWriter) WriteEnvironments(_a0 []terra.Environment) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]terra.Environment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStateReadWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateReadWriter creates a new instance of StateReadWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateReadWriter(t mockConstructorTestingTNewStateReadWriter) *StateReadWriter {
	mock := &StateReadWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

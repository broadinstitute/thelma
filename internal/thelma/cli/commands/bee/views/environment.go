package views

import (
	"github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	"github.com/broadinstitute/thelma/internal/thelma/state/providers/gitops/statebucket"
)

type Fiab struct {
	Name string `json:"name,omitempty" yaml:",omitempty"`
	IP   string `json:"ip,omitempty" yaml:",omitempty"`
}

// Environment struct used for presenting environments in yaml & json output generated by bee commands
type Environment struct {
	Name      string                           `json:"name"`
	Template  string                           `json:"template"`
	Hybrid    bool                             `json:"hybrid"`
	Fiab      Fiab                             `json:"fiab,omitempty" yaml:",omitempty"`
	Overrides map[string]*statebucket.Override `json:"overrides,omitempty" yaml:",omitempty"`
}

func ForTerraEnv(environment terra.Environment) Environment {
	e := Environment{
		Name:     environment.Name(),
		Template: environment.Template(),
		Hybrid:   environment.IsHybrid(),
	}

	if environment.IsHybrid() {
		e.Fiab = Fiab{
			Name: environment.Fiab().Name(),
			IP:   environment.Fiab().IP(),
		}
	}

	return e
}

func ForTerraEnvs(environments []terra.Environment) []Environment {
	var result []Environment
	for _, environment := range environments {
		result = append(result, ForTerraEnv(environment))
	}
	return result
}

func ForTerraEnvsWithOverrides(environments []terra.Environment, dynamicEnvs []statebucket.DynamicEnvironment) []Environment {
	result := ForTerraEnvs(environments)

	dynEnvMap := make(map[string]statebucket.DynamicEnvironment)
	for _, dynEnv := range dynamicEnvs {
		dynEnvMap[dynEnv.Name] = dynEnv
	}

	result = make([]Environment, len(environments))

	for i, e := range environments {
		dynEnv, exists := dynEnvMap[e.Name()]
		if exists {
			result[i] = ForTerraEnvWithOverride(e, dynEnv)
		} else {
			result[i] = ForTerraEnv(e)
		}
	}

	return result
}

func ForTerraEnvWithOverride(environment terra.Environment, dynamicEnv statebucket.DynamicEnvironment) Environment {
	view := ForTerraEnv(environment)
	view.Overrides = dynamicEnv.Overrides
	return view
}

package views

import (
	"github.com/broadinstitute/thelma/internal/thelma/bee"
	"github.com/broadinstitute/thelma/internal/thelma/ops/status"
	"github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	"time"
)

// BeeSummary struct used for presenting BEEs in yaml & json output
type BeeSummary struct {
	Name string
}

// BeeDetail struct used for presenting BEEs in yaml & json output generated by bee commands
type BeeDetail struct {
	Name                 string                   `json:"name"`
	Running              bool                     `json:"running" yaml:"running"`
	Template             string                   `json:"template"`
	PreventDeletion      bool                     `json:"preventDeletion,omitempty" yaml:"preventDeletion,omitempty"`
	DeleteAfter          time.Time                `json:"deleteAfter,omitempty" yaml:"deleteAfter,omitempty"`
	StopSchedule         ScheduleDetail           `json:"stopSchedule,omitempty" yaml:"stopSchedule,omitempty"`
	StartSchedule        ScheduleDetail           `json:"startSchedule,omitempty" yaml:"startSchedule,omitempty"`
	TerraHelmfileRef     string                   `json:"terraHelmfileRef,omitempty" yaml:"terraHelmfileRef,omitempty"`
	UniqueResourcePrefix string                   `json:"uniqueResourcePrefix" yaml:"uniqueResourcePrefix"`
	Versions             map[string]string        `json:"overrides,omitempty" yaml:",omitempty"`
	Services             map[string]ReleaseDetail `json:",omitempty" yaml:",omitempty"`
	Logs                 string                   `json:",omitempty" yaml:",omitempty"`
}

type LogsDetail struct {
	ContainerLogs string `json:",omitempty" yaml:",omitempty"`
	CloudLogging  string `json:",omitempty" yaml:",omitempty"`
}

type ReleaseDetail struct {
	Status           *status.Status `yaml:",omitempty" json:",omitempty"`
	AppVersion       string         `yaml:"appVersion,omitempty" json:"appVersion,omitempty"`
	ChartVersion     string         `yaml:"chartVersion,omitempty" json:"chartVersion,omitempty"`
	TerraHelmfileRef string         `yaml:"terraHelmfileRef,omitempty" json:"terraHelmfileRef,omitempty"`
}

type ScheduleDetail struct {
	Enabled       bool      `yaml:"enabled,omitempty" json:"enabled,omitempty"`
	RepeatingTime time.Time `yaml:"repeatingTime,omitempty" json:"repeatingTime,omitempty"`
	Weekends      bool      `yaml:"weekends,omitempty" json:"weekends,omitempty"`
}

type DescribeOptions struct {
	Status           map[terra.Release]*status.Status
	ContainerLogsURL string
	OmitVersions     bool
}

type DescribeOption func(options *DescribeOptions)

func DescribeBee(bee *bee.Bee) BeeDetail {
	return DescribeBeeEnv(bee.Environment, func(options *DescribeOptions) {
		options.Status = bee.Status
		options.ContainerLogsURL = bee.ContainerLogsURL
	})
}

func DescribeBeeEnv(bee terra.Environment, opts ...DescribeOption) BeeDetail {
	var options DescribeOptions
	for _, opt := range opts {
		opt(&options)
	}

	releaseDetails := make(map[string]ReleaseDetail)

	for _, release := range bee.Releases() {
		details := releaseDetails[release.Name()]

		if !options.OmitVersions {
			if release.IsAppRelease() {
				details.AppVersion = release.(terra.AppRelease).AppVersion()
			}
			details.ChartVersion = release.ChartVersion()
		}

		releaseDetails[release.Name()] = details
	}

	if options.Status != nil {
		for release, _status := range options.Status {
			if _status == nil {
				continue
			}
			details := releaseDetails[release.Name()]
			details.Status = _status
			releaseDetails[release.Name()] = details
		}
	}

	return BeeDetail{
		Name:            bee.Name(),
		Running:         !bee.Offline(),
		Template:        bee.Template(),
		PreventDeletion: bee.PreventDeletion(),
		DeleteAfter:     timeIfEnabled(bee.AutoDelete().After(), bee.AutoDelete().Enabled()),
		StopSchedule: ScheduleDetail{
			Enabled:       bee.OfflineScheduleBeginEnabled(),
			RepeatingTime: timeIfEnabled(bee.OfflineScheduleBeginTime(), bee.OfflineScheduleBeginEnabled()),
			Weekends:      bee.OfflineScheduleBeginEnabled(), // Stop schedule always applies on weekends if it is enabled
		},
		StartSchedule: ScheduleDetail{
			Enabled:       bee.OfflineScheduleEndEnabled(),
			RepeatingTime: timeIfEnabled(bee.OfflineScheduleEndTime(), bee.OfflineScheduleEndEnabled()),
			Weekends:      bee.OfflineScheduleEndEnabled() && bee.OfflineScheduleEndWeekends(),
		},
		TerraHelmfileRef:     bee.TerraHelmfileRef(),
		UniqueResourcePrefix: bee.UniqueResourcePrefix(),
		Services:             releaseDetails,
		Logs:                 options.ContainerLogsURL,
	}
}

func SummarizeBees(bees []terra.Environment) []BeeSummary {
	var result []BeeSummary
	for _, environment := range bees {
		result = append(result, BeeSummary{
			Name: environment.Name(),
		})
	}
	return result
}

func timeIfEnabled(internalTime time.Time, enabled bool) time.Time {
	if !enabled {
		var t time.Time
		return t
	}
	return internalTime
}

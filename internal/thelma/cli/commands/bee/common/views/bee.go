package views

import (
	"github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	"github.com/broadinstitute/thelma/internal/thelma/state/providers/gitops/statebucket"
)

type Fiab struct {
	Name string `json:"name,omitempty" yaml:",omitempty"`
	IP   string `json:"ip,omitempty" yaml:",omitempty"`
}

// BeeSummary struct used for presenting BEEs in yaml & json output
type BeeSummary struct {
	Name string
}

// BeeDetail struct used for presenting BEEs in yaml & json output generated by bee commands
type BeeDetail struct {
	Name             string                           `json:"name"`
	Template         string                           `json:"template"`
	TerraHelmfileRef string                           `json:"terraHelmfileRef,omitempty" yaml:"terraHelmfileRef,omitempty"`
	Hybrid           bool                             `json:"hybrid"`
	Fiab             Fiab                             `json:"fiab,omitempty" yaml:",omitempty"`
	Overrides        map[string]*statebucket.Override `json:"overrides,omitempty" yaml:",omitempty"`
}

func ForTerraEnv(environment terra.Environment) BeeDetail {
	e := BeeDetail{
		Name:             environment.Name(),
		TerraHelmfileRef: environment.TerraHelmfileRef(),
		Template:         environment.Template(),
		Hybrid:           environment.IsHybrid(),
	}

	if environment.IsHybrid() {
		e.Fiab = Fiab{
			Name: environment.Fiab().Name(),
			IP:   environment.Fiab().IP(),
		}
	}

	return e
}

func SummarizeBees(bees []terra.Environment) []BeeSummary {
	var result []BeeSummary
	for _, environment := range bees {
		result = append(result, BeeSummary{
			Name: environment.Name(),
		})
	}
	return result
}

func DescribeBees(bees []terra.Environment, dynamicEnvs []statebucket.DynamicEnvironment) []BeeDetail {
	dynEnvMap := make(map[string]statebucket.DynamicEnvironment)
	for _, dynEnv := range dynamicEnvs {
		dynEnvMap[dynEnv.Name] = dynEnv
	}

	result := make([]BeeDetail, len(bees))

	for i, e := range bees {
		dynEnv, exists := dynEnvMap[e.Name()]
		if exists {
			result[i] = DescribeBee(e, dynEnv)
		} else {
			result[i] = ForTerraEnv(e)
		}
	}

	return result
}

func DescribeBee(bee terra.Environment, dynamicEnv statebucket.DynamicEnvironment) BeeDetail {
	view := ForTerraEnv(bee)
	view.Overrides = dynamicEnv.Overrides
	return view
}

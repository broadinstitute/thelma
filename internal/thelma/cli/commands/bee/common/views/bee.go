package views

import (
	"github.com/broadinstitute/thelma/internal/thelma/bee"
	"github.com/broadinstitute/thelma/internal/thelma/ops/status"
	"github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	"github.com/broadinstitute/thelma/internal/thelma/state/providers/gitops/statebucket"
)

// BeeSummary struct used for presenting BEEs in yaml & json output
type BeeSummary struct {
	Name string
}

// BeeDetail struct used for presenting BEEs in yaml & json output generated by bee commands
type BeeDetail struct {
	Name                 string                           `json:"name"`
	Template             string                           `json:"template"`
	TerraHelmfileRef     string                           `json:"terraHelmfileRef,omitempty" yaml:"terraHelmfileRef,omitempty"`
	UniqueResourcePrefix string                           `json:"uniqueResourcePrefix" yaml:"uniqueResourcePrefix"`
	Overrides            map[string]*statebucket.Override `json:"overrides,omitempty" yaml:",omitempty"`
}

type LogsDetail struct {
	ContainerLogs string `json:",omitempty" yaml:",omitempty"`
	CloudLogging  string `json:",omitempty" yaml:",omitempty"`
}

// BeeWithOperationalDetails struct used for presenting BEEs with release detail information in yaml & json output generated by bee commands
type BeeWithOperationalDetails struct {
	BeeDetail `yaml:",inline"`
	Services  map[string]ReleaseDetail `json:",omitempty" yaml:",omitempty"`
	Logs      string                   `json:",omitempty" yaml:",omitempty"`
}

type ReleaseDetail struct {
	Status *status.Status `yaml:",omitempty" json:",omitempty"`
}

func DescribeBeeEnv(bee terra.Environment) BeeDetail {
	e := BeeDetail{
		Name:                 bee.Name(),
		TerraHelmfileRef:     bee.TerraHelmfileRef(),
		Template:             bee.Template(),
		UniqueResourcePrefix: bee.UniqueResourcePrefix(),
	}

	return e
}

func DescribeBee(bee *bee.Bee) BeeWithOperationalDetails {
	return DescribeBeeWith(bee.Environment, func(options *DescribeOptions) {
		options.Status = bee.Status
		options.ContainerLogsURL = bee.ContainerLogsURL
	})
}

type DescribeOptions struct {
	Status           map[terra.Release]status.Status
	ContainerLogsURL string
}

type DescribeOption func(options *DescribeOptions)

func DescribeBeeWith(env terra.Environment, opts ...DescribeOption) BeeWithOperationalDetails {
	var options DescribeOptions
	for _, opt := range opts {
		opt(&options)
	}

	releaseDetails := make(map[string]ReleaseDetail)

	if options.Status != nil {
		for release, _status := range options.Status {
			details := releaseDetails[release.Name()]
			details.Status = &_status
			releaseDetails[release.Name()] = details
		}
	}

	return BeeWithOperationalDetails{
		BeeDetail: DescribeBeeEnv(env),
		Services:  releaseDetails,
		Logs:      options.ContainerLogsURL,
	}
}

func SummarizeBees(bees []terra.Environment) []BeeSummary {
	var result []BeeSummary
	for _, environment := range bees {
		result = append(result, BeeSummary{
			Name: environment.Name(),
		})
	}
	return result
}

func DescribeBeeWithReleaseOverrides(bee terra.Environment, dynamicEnv statebucket.DynamicEnvironment) BeeDetail {
	view := DescribeBeeEnv(bee)
	view.Overrides = dynamicEnv.Overrides
	return view
}

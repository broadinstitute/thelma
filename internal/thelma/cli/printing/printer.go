package printing

import (
	"fmt"
	"github.com/spf13/cobra"
	"io"
	"os"
)

const defaultFormat = "yaml"
const stdoutFlagVal = "(stdout)"

var flagNames = struct {
	outputFile   string
	outputFormat string
}{
	outputFile:   "output-file",
	outputFormat: "output-format",
}

type options struct {
	outputFile   string
	outputFormat string
}

// Printer is a tool for printing formatted output from thelma cli commands.
type Printer interface {
	AddFlags(command *cobra.Command)
	VerifyFlags() error
	PrintOutput(output interface{}, stdout io.Writer) error
}

func NewPrinter() Printer {
	return &printer{}
}

// Implements printer interface
type printer struct {
	options options
}

func (p *printer) AddFlags(command *cobra.Command) {
	command.Flags().StringVar(&p.options.outputFormat, flagNames.outputFormat, defaultFormat, fmt.Sprintf("Format for console output generated by this command. One of: %s", supportedFormatsMsg))
	command.Flags().StringVar(&p.options.outputFile, flagNames.outputFile, stdoutFlagVal, "Optionally write output to file instead of stdout")
}

func (p *printer) VerifyFlags() error {
	if !isSupportedFormat(p.options.outputFormat) {
		return fmt.Errorf("--%s must be one of %s; got %q", flagNames.outputFormat, supportedFormatsMsg, p.options.outputFormat)
	}
	return nil
}

func (p *printer) PrintOutput(output interface{}, stdout io.Writer) error {
	formatted, err := format(p.options.outputFormat, output)
	if err != nil {
		return fmt.Errorf("error formatting output: %v", err)
	}
	if p.options.outputFile == stdoutFlagVal {
		return printToStdout(formatted, stdout)
	} else {
		return printToFile(formatted, p.options.outputFile)
	}
}

func printToStdout(data []byte, stdout io.Writer) error {
	_, err := stdout.Write(data)
	return err
}

func printToFile(data []byte, filename string) error {
	return os.WriteFile(filename, data, 0666)
}

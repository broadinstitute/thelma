// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	cli "github.com/broadinstitute/thelma/internal/thelma/cli"
	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// RunContext is an autogenerated mock type for the RunContext type
type RunContext struct {
	mock.Mock
}

// Args provides a mock function with given fields:
func (_m *RunContext) Args() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// CobraCommand provides a mock function with given fields:
func (_m *RunContext) CobraCommand() *cobra.Command {
	ret := _m.Called()

	var r0 *cobra.Command
	if rf, ok := ret.Get(0).(func() *cobra.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cobra.Command)
		}
	}

	return r0
}

// CommandName provides a mock function with given fields:
func (_m *RunContext) CommandName() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// HasOutput provides a mock function with given fields:
func (_m *RunContext) HasOutput() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Output provides a mock function with given fields:
func (_m *RunContext) Output() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Parent provides a mock function with given fields:
func (_m *RunContext) Parent() cli.ThelmaCommand {
	ret := _m.Called()

	var r0 cli.ThelmaCommand
	if rf, ok := ret.Get(0).(func() cli.ThelmaCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cli.ThelmaCommand)
		}
	}

	return r0
}

// SetOutput provides a mock function with given fields: data
func (_m *RunContext) SetOutput(data interface{}) {
	_m.Called(data)
}

type mockConstructorTestingTNewRunContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewRunContext creates a new instance of RunContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRunContext(t mockConstructorTestingTNewRunContext) *RunContext {
	mock := &RunContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

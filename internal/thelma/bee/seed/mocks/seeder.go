// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	seed "github.com/broadinstitute/thelma/internal/thelma/bee/seed"
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// Seeder is an autogenerated mock type for the Seeder type
type Seeder struct {
	mock.Mock
}

type Seeder_Expecter struct {
	mock *mock.Mock
}

func (_m *Seeder) EXPECT() *Seeder_Expecter {
	return &Seeder_Expecter{mock: &_m.Mock}
}

// Seed provides a mock function with given fields: env, seedOptions
func (_m *Seeder) Seed(env terra.Environment, seedOptions seed.SeedOptions) error {
	ret := _m.Called(env, seedOptions)

	if len(ret) == 0 {
		panic("no return value specified for Seed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(terra.Environment, seed.SeedOptions) error); ok {
		r0 = rf(env, seedOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seeder_Seed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seed'
type Seeder_Seed_Call struct {
	*mock.Call
}

// Seed is a helper method to define mock.On call
//   - env terra.Environment
//   - seedOptions seed.SeedOptions
func (_e *Seeder_Expecter) Seed(env interface{}, seedOptions interface{}) *Seeder_Seed_Call {
	return &Seeder_Seed_Call{Call: _e.mock.On("Seed", env, seedOptions)}
}

func (_c *Seeder_Seed_Call) Run(run func(env terra.Environment, seedOptions seed.SeedOptions)) *Seeder_Seed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.Environment), args[1].(seed.SeedOptions))
	})
	return _c
}

func (_c *Seeder_Seed_Call) Return(_a0 error) *Seeder_Seed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Seeder_Seed_Call) RunAndReturn(run func(terra.Environment, seed.SeedOptions) error) *Seeder_Seed_Call {
	_c.Call.Return(run)
	return _c
}

// Unseed provides a mock function with given fields: env, unseedOptions
func (_m *Seeder) Unseed(env terra.Environment, unseedOptions seed.UnseedOptions) error {
	ret := _m.Called(env, unseedOptions)

	if len(ret) == 0 {
		panic("no return value specified for Unseed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(terra.Environment, seed.UnseedOptions) error); ok {
		r0 = rf(env, unseedOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seeder_Unseed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unseed'
type Seeder_Unseed_Call struct {
	*mock.Call
}

// Unseed is a helper method to define mock.On call
//   - env terra.Environment
//   - unseedOptions seed.UnseedOptions
func (_e *Seeder_Expecter) Unseed(env interface{}, unseedOptions interface{}) *Seeder_Unseed_Call {
	return &Seeder_Unseed_Call{Call: _e.mock.On("Unseed", env, unseedOptions)}
}

func (_c *Seeder_Unseed_Call) Run(run func(env terra.Environment, unseedOptions seed.UnseedOptions)) *Seeder_Unseed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.Environment), args[1].(seed.UnseedOptions))
	})
	return _c
}

func (_c *Seeder_Unseed_Call) Return(_a0 error) *Seeder_Unseed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Seeder_Unseed_Call) RunAndReturn(run func(terra.Environment, seed.UnseedOptions) error) *Seeder_Unseed_Call {
	_c.Call.Return(run)
	return _c
}

// NewSeeder creates a new instance of Seeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSeeder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Seeder {
	mock := &Seeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

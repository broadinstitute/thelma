// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	terra "github.com/broadinstitute/thelma/internal/thelma/state/api/terra"
	mock "github.com/stretchr/testify/mock"
)

// Cleanup is an autogenerated mock type for the Cleanup type
type Cleanup struct {
	mock.Mock
}

type Cleanup_Expecter struct {
	mock *mock.Mock
}

func (_m *Cleanup) EXPECT() *Cleanup_Expecter {
	return &Cleanup_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: bee
func (_m *Cleanup) Cleanup(bee terra.Environment) error {
	ret := _m.Called(bee)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(terra.Environment) error); ok {
		r0 = rf(bee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cleanup_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type Cleanup_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - bee terra.Environment
func (_e *Cleanup_Expecter) Cleanup(bee interface{}) *Cleanup_Cleanup_Call {
	return &Cleanup_Cleanup_Call{Call: _e.mock.On("Cleanup", bee)}
}

func (_c *Cleanup_Cleanup_Call) Run(run func(bee terra.Environment)) *Cleanup_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(terra.Environment))
	})
	return _c
}

func (_c *Cleanup_Cleanup_Call) Return(_a0 error) *Cleanup_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cleanup_Cleanup_Call) RunAndReturn(run func(terra.Environment) error) *Cleanup_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// NewCleanup creates a new instance of Cleanup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCleanup(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cleanup {
	mock := &Cleanup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

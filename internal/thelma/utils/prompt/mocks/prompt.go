// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	prompt "github.com/broadinstitute/thelma/internal/thelma/utils/prompt"
	mock "github.com/stretchr/testify/mock"
)

// Prompt is an autogenerated mock type for the Prompt type
type Prompt struct {
	mock.Mock
}

type Prompt_Expecter struct {
	mock *mock.Mock
}

func (_m *Prompt) EXPECT() *Prompt_Expecter {
	return &Prompt_Expecter{mock: &_m.Mock}
}

// Confirm provides a mock function with given fields: message, options
func (_m *Prompt) Confirm(message string, options ...func(*prompt.ConfirmOptions)) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...func(*prompt.ConfirmOptions)) bool); ok {
		r0 = rf(message, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...func(*prompt.ConfirmOptions)) error); ok {
		r1 = rf(message, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prompt_Confirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirm'
type Prompt_Confirm_Call struct {
	*mock.Call
}

// Confirm is a helper method to define mock.On call
//   - message string
//   - options ...func(*prompt.ConfirmOptions)
func (_e *Prompt_Expecter) Confirm(message interface{}, options ...interface{}) *Prompt_Confirm_Call {
	return &Prompt_Confirm_Call{Call: _e.mock.On("Confirm",
		append([]interface{}{message}, options...)...)}
}

func (_c *Prompt_Confirm_Call) Run(run func(message string, options ...func(*prompt.ConfirmOptions))) *Prompt_Confirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*prompt.ConfirmOptions), len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(func(*prompt.ConfirmOptions))
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Prompt_Confirm_Call) Return(_a0 bool, _a1 error) *Prompt_Confirm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Newline provides a mock function with given fields:
func (_m *Prompt) Newline() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prompt_Newline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Newline'
type Prompt_Newline_Call struct {
	*mock.Call
}

// Newline is a helper method to define mock.On call
func (_e *Prompt_Expecter) Newline() *Prompt_Newline_Call {
	return &Prompt_Newline_Call{Call: _e.mock.On("Newline")}
}

func (_c *Prompt_Newline_Call) Run(run func()) *Prompt_Newline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Prompt_Newline_Call) Return(_a0 error) *Prompt_Newline_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewPrompt interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrompt creates a new instance of Prompt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrompt(t mockConstructorTestingTNewPrompt) *Prompt {
	mock := &Prompt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
